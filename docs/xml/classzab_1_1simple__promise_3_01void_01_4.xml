<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1simple__promise_3_01void_01_4" kind="class" language="C++" prot="public">
    <compoundname>zab::simple_promise&lt; void &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">zab::simple_common&lt; simple_promise&lt; void &gt; &gt;</basecompoundref>
    <derivedcompoundref refid="classzab_1_1visitor__promise" prot="public" virt="non-virtual">zab::visitor_promise&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classzab_1_1visitor__promise_3_01void_01_4" prot="public" virt="non-virtual">zab::visitor_promise&lt; void &gt;</derivedcompoundref>
    <includes refid="simple__promise_8hpp" local="no">simple_promise.hpp</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classzab_1_1simple__promise_3_01void_01_4_1ac91447c4598ca0063bb9e1205357ee18" prot="public" static="no">
        <type>void</type>
        <definition>using zab::simple_promise&lt; void &gt;::returns =  void</definition>
        <argsstring></argsstring>
        <name>returns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="294" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="294" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1simple__promise_3_01void_01_4_1af55bc2d1f24c6a8f822ad8620d0c8d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::simple_promise&lt; void &gt;::simple_promise</definition>
        <argsstring>()=default</argsstring>
        <name>simple_promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="296" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__promise_3_01void_01_4_1a4852d0e9ccced8d88ff6d32f21dac5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::simple_promise&lt; void &gt;::~simple_promise</definition>
        <argsstring>()=default</argsstring>
        <name>~simple_promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="298" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__promise_3_01void_01_4_1a4538a87b24a49abcf019473f53c63704" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>returns</type>
        <definition>returns zab::simple_promise&lt; void &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="301" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__promise_3_01void_01_4_1a30bbf95fa66760a0cb731bd19a6dbc71" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::simple_promise&lt; void &gt;::return_void</definition>
        <argsstring>() noexcept</argsstring>
        <name>return_void</name>
        <briefdescription>
<para>The coroutine has finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="310" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="310" bodyend="311"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An optimised promise for promising nothing. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="290" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="290" bodyend="312"/>
    <listofallmembers>
      <member refid="classzab_1_1simple__common_1ab772a146a1fadaf56c30f41c68ec9284" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>complete</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1a4538a87b24a49abcf019473f53c63704" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>data</name></member>
      <member refid="classzab_1_1simple__common_1a4a0978f9233dda5c907155f793db6afe" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>final_suspend</name></member>
      <member refid="classzab_1_1simple__common_1a2fb0f6479190f926a05d1e502dd45a1f" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>get_return_object</name></member>
      <member refid="classzab_1_1simple__common_1acfb27f21499a377ee9d144fa8385a7d6" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>initial_suspend</name></member>
      <member refid="classzab_1_1simple__common_1a71be4e797d23e4099c5036c5876f9845" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>is_complete</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1a30bbf95fa66760a0cb731bd19a6dbc71" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>return_void</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1ac91447c4598ca0063bb9e1205357ee18" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>returns</name></member>
      <member refid="classzab_1_1simple__common_1a785a7eb5104909f68c4cd80d4d0b2210" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>set_underlying</name></member>
      <member refid="classzab_1_1simple__common_1a8c4fff11d8a379f9c57e633532a5a07d" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>simple_common</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1af55bc2d1f24c6a8f822ad8620d0c8d0a" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>simple_promise</name></member>
      <member refid="classzab_1_1simple__common_1ad8231a492550fda1e52d2a8e7e69efa8" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>underlying</name></member>
      <member refid="classzab_1_1simple__common_1a65343cd0bce64c263727d5cffe9b5190" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>unhandled_exception</name></member>
      <member refid="classzab_1_1simple__common_1aa0bd8b34ed3ff4603e2ffcc2cf2fadd4" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>~simple_common</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1a4852d0e9ccced8d88ff6d32f21dac5c1" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; void &gt;</scope><name>~simple_promise</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
