<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacezab_1_1details" kind="namespace" language="C++">
    <compoundname>zab::details</compoundname>
    <innerclass refid="structzab_1_1details_1_1no__op" prot="public">zab::details::no_op</innerclass>
    <innerclass refid="structzab_1_1details_1_1configs" prot="public">zab::details::configs</innerclass>
    <innerclass refid="structzab_1_1details_1_1context__generator" prot="public">zab::details::context_generator</innerclass>
    <innerclass refid="structzab_1_1details_1_1context__generator_3_01void_01_4" prot="public">zab::details::context_generator&lt; void &gt;</innerclass>
    <innerclass refid="structzab_1_1details_1_1one__of__these" prot="public">zab::details::one_of_these</innerclass>
    <innerclass refid="structzab_1_1details_1_1one__of__these_3_01std_1_1tuple_3_01T_8_8_8_01_4_01_4" prot="public">zab::details::one_of_these&lt; std::tuple&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="structzab_1_1details_1_1ready__tag" prot="public">zab::details::ready_tag</innerclass>
    <innerclass refid="structzab_1_1details_1_1resume__tag" prot="public">zab::details::resume_tag</innerclass>
    <innerclass refid="structzab_1_1details_1_1simple__awaitable" prot="public">zab::details::simple_awaitable</innerclass>
    <innerclass refid="structzab_1_1details_1_1final__suspension" prot="public">zab::details::final_suspension</innerclass>
    <innerclass refid="structzab_1_1details_1_1extract__promise__types" prot="public">zab::details::extract_promise_types</innerclass>
    <innerclass refid="structzab_1_1details_1_1extract__promise__types_3_01Awaitable_00_01Promises_8_8_8_01_4" prot="public">zab::details::extract_promise_types&lt; Awaitable, Promises... &gt;</innerclass>
    <innerclass refid="structzab_1_1details_1_1extract__promise__types_3_01simple__future_3_01ReturnType_00_01PromiseTy7397d64660a7b294b5eebe6261b46f58" prot="public">zab::details::extract_promise_types&lt; simple_future&lt; ReturnType, PromiseType &gt;, Promises... &gt;</innerclass>
    <innerclass refid="structzab_1_1details_1_1extract__promise__types_3_01reusable__future_3_01ReturnType_01_4_00_01Promises_8_8_8_01_4" prot="public">zab::details::extract_promise_types&lt; reusable_future&lt; ReturnType &gt;, Promises... &gt;</innerclass>
    <innerclass refid="structzab_1_1details_1_1extract__promise__types_3_4" prot="public">zab::details::extract_promise_types&lt;&gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacezab_1_1details_1a6bdb0ede6bbee3549454e674c34247e2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>input_t</declname>
            <defname>input_t</defname>
          </param>
        </templateparamlist>
        <type>decltype(std::tuple_cat(std::declval&lt; input_t &gt;()...))</type>
        <definition>using zab::details::tuple_cat_t = typedef decltype(std::tuple_cat(std::declval&lt;input_t&gt;()...))</definition>
        <argsstring></argsstring>
        <name>tuple_cat_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper for getting the type of concatanated tuples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="81" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacezab_1_1details_1af1cba9a9acc8a1c367283c508160fc90" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::NoThrowCallable</definition>
        <argsstring></argsstring>
        <name>NoThrowCallable</name>
        <initializer>= requires(T a)
        {
            {
                a()
            }
            noexcept-&gt;std::same_as&lt;void&gt;;
        }</initializer>
        <briefdescription>
<para>The object T is no-throw void(void) is no throw callable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_barrier.hpp" line="80" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/async_barrier.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1ae21fbe63dddfa1237f9a1969887966cc" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::NoThrowAwaitable</definition>
        <argsstring></argsstring>
        <name>NoThrowAwaitable</name>
        <initializer>= requires(T a)
        {
            {
                a.operator co_await()
            }
            noexcept;
            {
                a.operator co_await().await_resume()
            }
            noexcept-&gt;std::same_as&lt;void&gt;;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_barrier.hpp" line="89" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/async_barrier.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1ad3495571fd9c457c9b68df9e1d61daa1" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::Sequencer</definition>
        <argsstring></argsstring>
        <name>Sequencer</name>
        <initializer>= <ref refid="namespacezab_1_1details_1af1cba9a9acc8a1c367283c508160fc90" kindref="member">NoThrowCallable</ref>&lt;T&gt; || NoThrowAwaitable&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_barrier.hpp" line="102" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/async_barrier.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1adff4c450c8e9073e24c2facacff22f81" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::Execution</definition>
        <argsstring></argsstring>
        <name>Execution</name>
        <initializer>= requires(Base a)
        {
            {
                a.initial_suspend()
            }
            noexcept-&gt;std::same_as&lt;std::suspend_never&gt;;
            {
                a.final_suspend()
            }
            noexcept-&gt;std::same_as&lt;std::suspend_never&gt;;
            {
                a.return_void()
            }
            noexcept-&gt;std::same_as&lt;void&gt;;
            {
                a.get_return_object()
            }
            noexcept-&gt;std::same_as&lt;std::coroutine_handle&lt;Base&gt;&gt;;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_function.hpp" line="49" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/async_function.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1aae2337a00137bca1ff62f0f369c0f6aa" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::HasInitialise</definition>
        <argsstring></argsstring>
        <name>HasInitialise</name>
        <initializer>= requires(Base a)
        {
            {
                a.initialise()
            }
            noexcept-&gt;std::same_as&lt;void&gt;;
        }</initializer>
        <briefdescription>
<para>Has an <computeroutput>void initialise(void)</computeroutput> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Base</parametername>
</parameternamelist>
<parameterdescription>
<para>The class to test. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/engine_enabled.hpp" line="89" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/engine_enabled.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a041619824392973e2e94a2cde2b9f482" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::HasMain</definition>
        <argsstring></argsstring>
        <name>HasMain</name>
        <initializer>= requires(Base a)
        {
            {
                a.main()
            }
            noexcept-&gt;std::same_as&lt;void&gt;;
        }</initializer>
        <briefdescription>
<para>Has an <computeroutput>void main(void)</computeroutput> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Base</parametername>
</parameternamelist>
<parameterdescription>
<para>The class to test. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/engine_enabled.hpp" line="103" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/engine_enabled.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a36e4057267b1f67423f5742a6db8c0f2" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::PassThroughSuspend</definition>
        <argsstring></argsstring>
        <name>PassThroughSuspend</name>
        <initializer>= requires(Base a)
        {
            {
                a.await_suspend(std::declval&lt;tagged_event&gt;())
            }
            noexcept;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" line="50" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a36e3bad96ad53bf2f1a9ec61748274e6" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::GenericSuspend</definition>
        <argsstring></argsstring>
        <name>GenericSuspend</name>
        <initializer>= requires(Base a)
        {
            {
                a(std::declval&lt;tagged_event&gt;())
            }
            noexcept;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" line="59" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1aa3bc8724607597e9aadf5cacf4f8694c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::PassThroughReady</definition>
        <argsstring></argsstring>
        <name>PassThroughReady</name>
        <initializer>= requires(Base a)
        {
            {
                a.await_ready()
            }
            noexcept-&gt;std::same_as&lt;bool&gt;;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" line="70" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a5fb79bc0a693d45c1ecc4c47ba2eff7b" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::GenericReady</definition>
        <argsstring></argsstring>
        <name>GenericReady</name>
        <initializer>= requires(Base a)
        {
            {
                a(ready_tag{})
            }
            noexcept;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" line="79" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1ae07ea31f2616caddf138875d35158b70" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::ReadyReturnsBool</definition>
        <argsstring></argsstring>
        <name>ReadyReturnsBool</name>
        <initializer>= requires(Base a)
        {
            {
                a(ready_tag{})
            }
            noexcept-&gt;std::same_as&lt;bool&gt;;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" line="88" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a42e108f34c13bedbff0959bb08a872c1" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::PassThroughResume</definition>
        <argsstring></argsstring>
        <name>PassThroughResume</name>
        <initializer>= requires(Base a)
        {
            {
                a.await_resume()
            }
            noexcept;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" line="99" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a2a670d939883e4a5de2ea5f5c9cbd2eb" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::GenericResume</definition>
        <argsstring></argsstring>
        <name>GenericResume</name>
        <initializer>= requires(Base a)
        {
            {
                a(resume_tag{})
            }
            noexcept;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" line="108" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/generic_awaitable.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a62abdf752171c91445dbfb0644546a62" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::NoThrowInvoacablePP</definition>
        <argsstring></argsstring>
        <name>NoThrowInvoacablePP</name>
        <initializer>= std::is_nothrow_invocable_v&lt;Functor, <ref refid="structzab_1_1pause__pack" kindref="compound">pause_pack</ref>*&gt;</initializer>
        <briefdescription>
<para>Can the callable be nothrow called with a pause_pack*. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Functor</parametername>
</parameternamelist>
<parameterdescription>
<para>The callable type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/pause.hpp" line="84" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/pause.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1aef21cf880c6c43ddb10eef307dcd4b06" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::Reoccurring</definition>
        <argsstring></argsstring>
        <name>Reoccurring</name>
        <initializer>= requires(Base a)
        {
            {
                a.force_completion()
            }
            noexcept-&gt;std::same_as&lt;void&gt;;
            {
                a.prepare()
            }
            noexcept-&gt;std::same_as&lt;void&gt;;
            {
                a.value_ready()
            }
            noexcept-&gt;std::same_as&lt;bool&gt;;
        }
        &amp;&amp;Returnable&lt;Base&gt; &amp;&amp; (Returns&lt;Base&gt; || IsVoid&lt;Base&gt;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="52" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a6d1e92df96bb05bc5eb7a436e0a85d24" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::Returns</definition>
        <argsstring></argsstring>
        <name>Returns</name>
        <initializer>= requires(Base a)
        {
            {
                a.data()
            }
            noexcept;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="71" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1aa7050466b4c89e44b60b52f432c9dbcb" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::IsVoid</definition>
        <argsstring></argsstring>
        <name>IsVoid</name>
        <initializer>= std::same_as&lt;typename Base::returns, void&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="85" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1acf52e0f9c6657000e7c4955dc85e51d9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::Returnable</definition>
        <argsstring></argsstring>
        <name>Returnable</name>
        <initializer>= requires(Base a)
        {
            {a.initial_suspend()};
        }
        &amp;&amp;(Returns&lt;Base&gt; || IsVoid&lt;Base&gt;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="88" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a27bca408f8182103c4b2b81644fe1b33" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
          <param>
            <type>typename NotifyType</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::Notifiable</definition>
        <argsstring></argsstring>
        <name>Notifiable</name>
        <initializer>= requires(Base a)
        {
            {
                a(std::declval&lt;NotifyType&gt;())
            }
            noexcept-&gt;std::same_as&lt;notify_ctl&gt;;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/stateful_awaitable.hpp" line="53" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/stateful_awaitable.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a4ff93f3008751d1ba86821c51512dd12" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
          <param>
            <type>typename NotifyType</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::HasStatefulSuspension</definition>
        <argsstring></argsstring>
        <name>HasStatefulSuspension</name>
        <initializer>= requires(Base a)
        {
            {
                a(std::declval&lt;storage_event&lt;NotifyType&gt;*&gt;())
            }
            noexcept;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/stateful_awaitable.hpp" line="62" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/stateful_awaitable.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a279fa175f38208789a94d6ae23c680b4" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
          <param>
            <type>typename NotifyType</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::StatefulPassThroughSuspend</definition>
        <argsstring></argsstring>
        <name>StatefulPassThroughSuspend</name>
        <initializer>= requires(Base a)
        {
            {
                a.await_suspend(std::declval&lt;storage_event&lt;NotifyType&gt;*&gt;())
            }
            noexcept;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/stateful_awaitable.hpp" line="71" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/stateful_awaitable.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1af3c37048ad1b29becda8e1905fc2db97" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
          <param>
            <type>typename NotifyType</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::StatefulAwaitable</definition>
        <argsstring></argsstring>
        <name>StatefulAwaitable</name>
        <initializer>=
            Notifiable&lt;Base, NotifyType&gt; &amp;&amp; HasStatefulSuspension&lt;Base, NotifyType&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/stateful_awaitable.hpp" line="80" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/stateful_awaitable.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a611370b4f5ad878d0ebefff451f3edce" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::AwaitableVoid</definition>
        <argsstring></argsstring>
        <name>AwaitableVoid</name>
        <initializer>= requires(Base a)
        {
            {
                a.operator co_await().await_resume()
            }
            noexcept-&gt;std::same_as&lt;void&gt;;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="60" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacezab_1_1details_1a63a6aa88b35378967509203098d362e9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>concept</type>
        <definition>concept zab::details::AwaitableProxy</definition>
        <argsstring></argsstring>
        <name>AwaitableProxy</name>
        <initializer>= !AwaitableVoid&lt;Base&gt; &amp;&amp; requires(Base a)
        {
            {
                a.operator co_await()
            }
            noexcept;
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="69" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacezab_1_1details_1ae2fb31ab8cdcfe21973bb062ce04b0d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Results</declname>
            <defname>Results</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Promises</declname>
            <defname>Promises</defname>
          </param>
          <param>
            <type>typename Function</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void zab::details::init_first_imple</definition>
        <argsstring>(std::variant&lt; Results... &gt; &amp;_results, std::tuple&lt; Promises... &gt; &amp;_promises, Function &amp;_function, std::index_sequence&lt; Is... &gt;)</argsstring>
        <name>init_first_imple</name>
        <param>
          <type>std::variant&lt; Results... &gt; &amp;</type>
          <declname>_results</declname>
        </param>
        <param>
          <type>std::tuple&lt; Promises... &gt; &amp;</type>
          <declname>_promises</declname>
        </param>
        <param>
          <type>Function &amp;</type>
          <declname>_function</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/first_of.hpp" line="63" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/first_of.hpp" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacezab_1_1details_1ac9afa453e6cf93534379a4a28ea126af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Results</declname>
            <defname>Results</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Promises</declname>
            <defname>Promises</defname>
          </param>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto zab::details::init_first</definition>
        <argsstring>(std::variant&lt; Results... &gt; &amp;_results, std::tuple&lt; Promises... &gt; &amp;_promises, Function &amp;&amp;_function)</argsstring>
        <name>init_first</name>
        <param>
          <type>std::variant&lt; Results... &gt; &amp;</type>
          <declname>_results</declname>
        </param>
        <param>
          <type>std::tuple&lt; Promises... &gt; &amp;</type>
          <declname>_promises</declname>
        </param>
        <param>
          <type>Function &amp;&amp;</type>
          <declname>_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/first_of.hpp" line="74" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/first_of.hpp" bodystart="74" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacezab_1_1details_1a6db7199703afd2a105188ea553d8fb1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Results</declname>
            <defname>Results</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Promises</declname>
            <defname>Promises</defname>
          </param>
          <param>
            <type>typename Function</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void zab::details::init_wait_imple</definition>
        <argsstring>(std::tuple&lt; Results... &gt; &amp;_results, std::tuple&lt; Promises... &gt; &amp;_promises, Function &amp;_function, std::index_sequence&lt; Is... &gt;)</argsstring>
        <name>init_wait_imple</name>
        <param>
          <type>std::tuple&lt; Results... &gt; &amp;</type>
          <declname>_results</declname>
        </param>
        <param>
          <type>std::tuple&lt; Promises... &gt; &amp;</type>
          <declname>_promises</declname>
        </param>
        <param>
          <type>Function &amp;</type>
          <declname>_function</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
<para>In order applies the elements from both tuples to the function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_results</parametername>
</parameternamelist>
<parameterdescription>
<para>The first tuple. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_promises</parametername>
</parameternamelist>
<parameterdescription>
<para>The second tuple. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">&lt;unnamed&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Index sequence for folding.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>The first tuple types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Promises</parametername>
</parameternamelist>
<parameterdescription>
<para>The second tuple types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Function</parametername>
</parameternamelist>
<parameterdescription>
<para>The tupe of the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Is</parametername>
</parameternamelist>
<parameterdescription>
<para>The index sequence.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple with the results of {f(t_1, t_2,), f(t_2, t_3), ...} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="182" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="182" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="namespacezab_1_1details_1a44b6216b985c5797a1edba4653531f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Results</declname>
            <defname>Results</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Promises</declname>
            <defname>Promises</defname>
          </param>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto zab::details::init_wait</definition>
        <argsstring>(std::tuple&lt; Results... &gt; &amp;_results, std::tuple&lt; Promises... &gt; &amp;_promises, Function &amp;&amp;_function)</argsstring>
        <name>init_wait</name>
        <param>
          <type>std::tuple&lt; Results... &gt; &amp;</type>
          <declname>_results</declname>
        </param>
        <param>
          <type>std::tuple&lt; Promises... &gt; &amp;</type>
          <declname>_promises</declname>
        </param>
        <param>
          <type>Function &amp;&amp;</type>
          <declname>_function</declname>
        </param>
        <briefdescription>
<para>In order applies the elements from both tuples to the function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_results</parametername>
</parameternamelist>
<parameterdescription>
<para>The first tuple. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_promises</parametername>
</parameternamelist>
<parameterdescription>
<para>The second tuple. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be applied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Results</parametername>
</parameternamelist>
<parameterdescription>
<para>The first tuple types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Promises</parametername>
</parameternamelist>
<parameterdescription>
<para>The second tuple types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Function</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple with the results of {f(t_1, t_2,), f(t_2, t_3), ...} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="208" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="208" bodyend="218"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Internal details </para>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/async_barrier.hpp" line="57" column="5"/>
  </compounddef>
</doxygen>
