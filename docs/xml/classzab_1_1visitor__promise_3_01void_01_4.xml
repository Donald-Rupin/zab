<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1visitor__promise_3_01void_01_4" kind="class" language="C++" prot="public">
    <compoundname>zab::visitor_promise&lt; void &gt;</compoundname>
    <basecompoundref refid="classzab_1_1simple__promise_3_01void_01_4" prot="public" virt="non-virtual">zab::simple_promise&lt; void &gt;</basecompoundref>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1visitor__promise_3_01void_01_4_1af75d649a2fb2584affce4dbc26d4b028" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(void)&gt;</type>
        <definition>std::function&lt;void(void)&gt; zab::visitor_promise&lt; void &gt;::defer_</definition>
        <argsstring></argsstring>
        <name>defer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" line="169" column="27" bodyfile="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1visitor__promise_3_01void_01_4_1a3efc2480a6e7064def0b25e85783fe72" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::visitor_promise&lt; void &gt;::get_return_object</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_return_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" line="124" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1visitor__promise_3_01void_01_4_1afcf3f6f2a2fb477722f521f07f59d85f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::visitor_promise&lt; void &gt;::final_suspend</definition>
        <argsstring>() noexcept</argsstring>
        <name>final_suspend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" line="130" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1visitor__promise_3_01void_01_4_1a7a7f45092cf93d57db46fd1fe550b1b9" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>zab::visitor_promise&lt; void &gt;::requires</definition>
        <argsstring>(std::is_nothrow_invocable_v&lt; Functor &gt;) auto yield_value(defer_block&lt; Functor &gt; &amp;&amp;_block)</argsstring>
        <name>requires</name>
        <param>
          <type>std::is_nothrow_invocable_v&lt; Functor &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" line="137" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" bodystart="137" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1visitor__promise_3_01void_01_4_1ae66a23945a6a64b89072de140489d281" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::visitor_promise&lt; void &gt;::yield_value</definition>
        <argsstring>(purge_block &amp;&amp;)</argsstring>
        <name>yield_value</name>
        <param>
          <type>purge_block &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" line="161" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" bodystart="161" bodyend="165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>zab::simple_promise&lt; void &gt;</label>
        <link refid="classzab_1_1simple__promise_3_01void_01_4"/>
      </node>
      <node id="1">
        <label>zab::visitor_promise&lt; void &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>zab::simple_promise&lt; void &gt;</label>
        <link refid="classzab_1_1simple__promise_3_01void_01_4"/>
      </node>
      <node id="1">
        <label>zab::visitor_promise&lt; void &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" line="119" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/visitor_promise.hpp" bodystart="119" bodyend="170"/>
    <listofallmembers>
      <member refid="classzab_1_1simple__common_1ab772a146a1fadaf56c30f41c68ec9284" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>complete</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1a4538a87b24a49abcf019473f53c63704" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>data</name></member>
      <member refid="classzab_1_1visitor__promise_3_01void_01_4_1af75d649a2fb2584affce4dbc26d4b028" prot="private" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>defer_</name></member>
      <member refid="classzab_1_1visitor__promise_3_01void_01_4_1afcf3f6f2a2fb477722f521f07f59d85f" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>final_suspend</name></member>
      <member refid="classzab_1_1simple__common_1a4a0978f9233dda5c907155f793db6afe" prot="public" virt="non-virtual" ambiguityscope="zab::simple_promise&lt; void &gt;::"><scope>zab::visitor_promise&lt; void &gt;</scope><name>final_suspend</name></member>
      <member refid="classzab_1_1visitor__promise_3_01void_01_4_1a3efc2480a6e7064def0b25e85783fe72" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>get_return_object</name></member>
      <member refid="classzab_1_1simple__common_1acfb27f21499a377ee9d144fa8385a7d6" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>initial_suspend</name></member>
      <member refid="classzab_1_1simple__common_1a71be4e797d23e4099c5036c5876f9845" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>is_complete</name></member>
      <member refid="classzab_1_1visitor__promise_3_01void_01_4_1a7a7f45092cf93d57db46fd1fe550b1b9" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>requires</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1a30bbf95fa66760a0cb731bd19a6dbc71" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>return_void</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1ac91447c4598ca0063bb9e1205357ee18" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>returns</name></member>
      <member refid="classzab_1_1simple__common_1a785a7eb5104909f68c4cd80d4d0b2210" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>set_underlying</name></member>
      <member refid="classzab_1_1simple__common_1a8c4fff11d8a379f9c57e633532a5a07d" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>simple_common</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1af55bc2d1f24c6a8f822ad8620d0c8d0a" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>simple_promise</name></member>
      <member refid="classzab_1_1simple__common_1ad8231a492550fda1e52d2a8e7e69efa8" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>underlying</name></member>
      <member refid="classzab_1_1simple__common_1a65343cd0bce64c263727d5cffe9b5190" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>unhandled_exception</name></member>
      <member refid="classzab_1_1visitor__promise_3_01void_01_4_1ae66a23945a6a64b89072de140489d281" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>yield_value</name></member>
      <member refid="classzab_1_1simple__common_1aa0bd8b34ed3ff4603e2ffcc2cf2fadd4" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>~simple_common</name></member>
      <member refid="classzab_1_1simple__promise_3_01void_01_4_1a4852d0e9ccced8d88ff6d32f21dac5c1" prot="public" virt="non-virtual"><scope>zab::visitor_promise&lt; void &gt;</scope><name>~simple_promise</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
