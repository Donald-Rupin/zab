<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1event__loop" kind="class" language="C++" prot="public">
    <compoundname>zab::event_loop</compoundname>
    <includes refid="event__loop_8hpp" local="no">event_loop.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classzab_1_1event__loop_1ad1d9a5b64efba25fb8d8adde6594c8a2" prot="public" static="no" strong="yes">
        <type></type>
        <name>CancelResult</name>
        <enumvalue id="classzab_1_1event__loop_1ad1d9a5b64efba25fb8d8adde6594c8a2a9e2024e27d037d51bb46ef86d2e0ea4d" prot="public">
          <name>kDone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The cancel was complete. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classzab_1_1event__loop_1ad1d9a5b64efba25fb8d8adde6594c8a2ab096e4f92f6c4184d188166e8f156fbb" prot="public">
          <name>kNotFound</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Could not find an operation with that io_event*. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classzab_1_1event__loop_1ad1d9a5b64efba25fb8d8adde6594c8a2a662060693f074df0c3ca4ecae9626990" prot="public">
          <name>kTried</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>We tried, but the operation could not be canceled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classzab_1_1event__loop_1ad1d9a5b64efba25fb8d8adde6594c8a2ab62fa3c9492b6dae76c23d6dfa466611" prot="public">
          <name>kFailed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>We could not create the cancel request dues to an error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classzab_1_1event__loop_1ad1d9a5b64efba25fb8d8adde6594c8a2a25c2dc47991b3df171ed5192bcf70390" prot="public">
          <name>kUnknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Something exception and unknown happened. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Describes the result of a cancel operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="844" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="844" bodyend="850"/>
      </memberdef>
      <memberdef kind="typedef" id="classzab_1_1event__loop_1a5dc860d461ffc62bca288e8de87815c0" prot="public" static="no">
        <type>storage_event&lt; int &gt;</type>
        <definition>using zab::event_loop::io_event =  storage_event&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>io_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="71" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzab_1_1event__loop_1aea840fc16142d566b5454f19421bd4a9" prot="public" static="no">
        <type>io_event *</type>
        <definition>using zab::event_loop::cancelation_token =  io_event*</definition>
        <argsstring></argsstring>
        <name>cancelation_token</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="73" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzab_1_1event__loop_1a5bc5bdb49782e6fa71ed7f905c8acbc8" prot="public" static="no">
        <type>tagged_event</type>
        <definition>using zab::event_loop::user_event =  tagged_event</definition>
        <argsstring></argsstring>
        <name>user_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="75" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classzab_1_1event__loop_1a631391026e3a798279048ce2dc81e0c3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto zab::event_loop::kQueueSize</definition>
        <argsstring></argsstring>
        <name>kQueueSize</name>
        <initializer>= 4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="77" column="35" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1event__loop_1aa82688bbfcdecd9e7028228294b883ee" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; io_uring &gt;</type>
        <definition>std::unique_ptr&lt;io_uring&gt; zab::event_loop::ring_</definition>
        <argsstring></argsstring>
        <name>ring_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="1006" column="29" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="1006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a51aa6508e6f78b05f6b09edd9c2f6b18" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int zab::event_loop::user_space_event_fd_</definition>
        <argsstring></argsstring>
        <name>user_space_event_fd_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="1011" column="38" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="1011" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1ad2ed9448e644d8d80f61b93fa2ed50cc" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; std::size_t &gt;</type>
        <definition>std::atomic&lt;std::size_t&gt; zab::event_loop::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="1012" column="25" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="1012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a1748edba5bd6259c9e2454fa44d06270" prot="private" static="no" mutable="no">
        <type><ref refid="structzab_1_1spin__lock" kindref="compound">spin_lock</ref></type>
        <definition>spin_lock zab::event_loop::mtx_</definition>
        <argsstring></argsstring>
        <name>mtx_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="1013" column="38" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="1013" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a3825769e5ecdb89698e93e61ddde019b" prot="private" static="no" mutable="no">
        <type>std::deque&lt; user_event &gt;</type>
        <definition>std::deque&lt;user_event&gt; zab::event_loop::handles_[2]</definition>
        <argsstring>[2]</argsstring>
        <name>handles_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="1014" column="26" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="1014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1acb6a6f587e70d8aa3fdd347f543c4765" prot="private" static="no" mutable="no">
        <type>cancelation_token</type>
        <definition>cancelation_token zab::event_loop::use_space_handle_</definition>
        <argsstring></argsstring>
        <name>use_space_handle_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="1015" column="38" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="1015" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classzab_1_1event__loop_1a57b7982b4c79243d01421551a0fa232a" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int zab::event_loop::kWriteIndex</definition>
        <argsstring></argsstring>
        <name>kWriteIndex</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="1008" column="34" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="1008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a3238f4d73abbb816be905ce7028f41fc" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int zab::event_loop::kReadIndex</definition>
        <argsstring></argsstring>
        <name>kReadIndex</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="1009" column="34" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="1009" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1event__loop_1a9024ff7da0075bc65be27b9268e3c1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::event_loop::event_loop</definition>
        <argsstring>()</argsstring>
        <name>event_loop</name>
        <briefdescription>
<para>Constructs a new <ref refid="classzab_1_1event__loop" kindref="compound">event_loop</ref>. Is unusable until initialise is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="83" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a3c0d851b986da902783bb4f9d5e44256" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::initialise</definition>
        <argsstring>() noexcept</argsstring>
        <name>initialise</name>
        <briefdescription>
<para>Initialises the <ref refid="classzab_1_1event__loop" kindref="compound">event_loop</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="90" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="88" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a506fc84ad7313723a4d7afda6687a621" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::initialise</definition>
        <argsstring>(int _io_fd) noexcept</argsstring>
        <name>initialise</name>
        <param>
          <type>int</type>
          <declname>_io_fd</declname>
        </param>
        <briefdescription>
<para>Initialises the <ref refid="classzab_1_1event__loop" kindref="compound">event_loop</ref> that shares a worker pool with _io_fd. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_io_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The io_ring to share a worker pool with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="99" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="113" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a93dcda18bf9fdb34e180b58bb00582c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::event_loop::~event_loop</definition>
        <argsstring>()</argsstring>
        <name>~event_loop</name>
        <briefdescription>
<para>Destroys the object and cleans up the resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="104" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="147" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1ae7057597b05ac498692b534632267e20" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::open_at</definition>
        <argsstring>(int _dfd, const std::string_view _path, int _flags, mode_t _mode, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>open_at</name>
        <param>
          <type>int</type>
          <declname>_dfd</declname>
        </param>
        <param>
          <type>const std::string_view</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>_mode</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Open a file relative to a directory file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://linux.die.net/man/2/openat">https://linux.die.net/man/2/openat</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_dfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory descriptor or AT_FDCWD </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file relative to _dfd. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags used to open the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Permissions to use for the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of <computeroutput>::openat()</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="122" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="122" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a6abbb0ec7e2fb0cfc7b867c3f91a6199" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::open_at</definition>
        <argsstring>(io_event *_cancel_token, int _dfd, const std::string_view _path, int _flags, mode_t _mode) noexcept</argsstring>
        <name>open_at</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_dfd</declname>
        </param>
        <param>
          <type>const std::string_view</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>_mode</declname>
        </param>
        <briefdescription>
<para>Open a file relative to a directory file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://linux.die.net/man/2/openat.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_dfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory descriptor or AT_FDCWD </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file relative to _dfd. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags used to open the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Permissions to use for the file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="162" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="165" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a78afeb13c60aba9df381d2e05217d513" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::close</definition>
        <argsstring>(int _fd, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>close</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Close a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://man7.org/linux/man-pages/man2/close.2.html">https://man7.org/linux/man-pages/man2/close.2.html</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to close. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of <computeroutput>::close()</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="181" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="181" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1afe0d8bec9d0fae6b378f5ba8cb80f248" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::close</definition>
        <argsstring>(io_event *_cancel_token, int _fd) noexcept</argsstring>
        <name>close</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <briefdescription>
<para>Close a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/close.2.html.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to close.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="213" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1ad92141faa9b78d4849824f667f5985ed" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::read</definition>
        <argsstring>(int _fd, std::span&lt; std::byte &gt; _buffer, off_t _offset, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>read</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Read from a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://man7.org/linux/man-pages/man2/read.2.html">https://man7.org/linux/man-pages/man2/read.2.html</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the buffer to start from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of <computeroutput>::read()</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="229" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="229" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1af8b48a54dd7ea706fdd6dbc6f8a707df" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::read</definition>
        <argsstring>(io_event *_cancel_token, int _fd, std::span&lt; std::byte &gt; _buffer, off_t _offset) noexcept</argsstring>
        <name>read</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <briefdescription>
<para>Read from a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/read.2.html.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the buffer to start from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="267" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="189" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1ada3db2ca1f7f5d716228be7592a63fdd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::fixed_read</definition>
        <argsstring>(int _fd, std::span&lt; std::byte &gt; _buffer, off_t _offset, int _buf_index, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>fixed_read</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_buf_index</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Read from a file descriptor using a fixed buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://man7.org/linux/man-pages/man2/read.2.html">https://man7.org/linux/man-pages/man2/read.2.html</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the buffer to start from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buf_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the fixed buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of the <computeroutput><ref refid="classzab_1_1event__loop_1ada3db2ca1f7f5d716228be7592a63fdd" kindref="member">fixed_read()</ref></computeroutput> operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="288" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="288" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a6d4c3a43014d3a78ad42fc9201685b75" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::fixed_read</definition>
        <argsstring>(io_event *_cancel_token, int _fd, std::span&lt; std::byte &gt; _buffer, off_t _offset, int _buf_index) noexcept</argsstring>
        <name>fixed_read</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_buf_index</declname>
        </param>
        <briefdescription>
<para>Read from a file descriptor using a fixed buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/read.2.html.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the buffer to start from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buf_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the fixed buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="333" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="224" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a401bed36487aed0a941b69403584314e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::read_v</definition>
        <argsstring>(int _fd, const struct iovec *_iovecs, unsigned _nr_vecs, off_t _offset, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>read_v</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>_iovecs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_nr_vecs</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Read from a file descriptor into multiple buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://man7.org/linux/man-pages/man2/readv.2.html">https://man7.org/linux/man-pages/man2/readv.2.html</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_iovecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The _iovecs array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_nr_vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the _iovecs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the buffer to start from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of the <computeroutput>::readv()</computeroutput> operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="355" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="355" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1aac55a5c245a5b81a19c7e35ef674657f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::read_v</definition>
        <argsstring>(io_event *_cancel_token, int _fd, const struct iovec *_iovecs, unsigned _nr_vecs, off_t _offset) noexcept</argsstring>
        <name>read_v</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>_iovecs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_nr_vecs</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <briefdescription>
<para>Read from a file descriptor into multiple buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/readv.2.html
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_iovecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The _iovecs array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_nr_vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the _iovecs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the buffer to start from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="400" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="206" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a82b15c8f9d283ea69b64f1582fedd7ad" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::write</definition>
        <argsstring>(int _fd, std::span&lt; const std::byte &gt; _buffer, off_t _offset, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>write</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Write to a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://man7.org/linux/man-pages/man2/write.2.html">https://man7.org/linux/man-pages/man2/write.2.html</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offest from where to start writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of the <computeroutput>::write()</computeroutput> operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="421" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="421" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1ad337f08e6d5481c7621714043e3df91e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::write</definition>
        <argsstring>(io_event *_cancel_token, int _fd, std::span&lt; const std::byte &gt; _buffer, off_t _offset) noexcept</argsstring>
        <name>write</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <briefdescription>
<para>Write to a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/write.2.html
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offest from where to start writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="459" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="243" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a33de05ddf11ac5e1ee42da8bb39e4d31" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::fixed_write</definition>
        <argsstring>(int _fd, std::span&lt; const std::byte &gt; _buffer, off_t _offset, int _buf_index, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>fixed_write</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_buf_index</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Write from a fixed buffer into a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://man7.org/linux/man-pages/man2/write.2.html;">https://man7.org/linux/man-pages/man2/write.2.html;</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buf_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The pinned buffer index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of the <computeroutput><ref refid="classzab_1_1event__loop_1a33de05ddf11ac5e1ee42da8bb39e4d31" kindref="member">fixed_write()</ref></computeroutput> operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="480" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="480" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a7c26352c938f372e51611a5905f78e76" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::fixed_write</definition>
        <argsstring>(io_event *_cancel_token, int _fd, std::span&lt; const std::byte &gt; _buffer, off_t _offset, int _buf_index) noexcept</argsstring>
        <name>fixed_write</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_buf_index</declname>
        </param>
        <briefdescription>
<para>Write from a fixed buffer into a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/write.2.html
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buf_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The pinned buffer index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="525" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="278" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1aa78a0138d28c98a9e089f7d9396f58f5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::write_v</definition>
        <argsstring>(int _fd, const struct iovec *_iovecs, unsigned _nr_vecs, off_t _offset, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>write_v</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>_iovecs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_nr_vecs</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Write data from multiple buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>See: <ulink url="https://man7.org/linux/man-pages/man2/writev.2.html">https://man7.org/linux/man-pages/man2/writev.2.html</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_iovecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The iovec structure array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_nr_vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the iovec array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offest from where to start writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of the <computeroutput>::writev()</computeroutput> operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="547" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="547" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a7990c9ddb4789212cc876021738d05a3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::write_v</definition>
        <argsstring>(io_event *_cancel_token, int _fd, const struct iovec *_iovecs, unsigned _nr_vecs, off_t _offset) noexcept</argsstring>
        <name>write_v</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>_iovecs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_nr_vecs</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <briefdescription>
<para>Write data from multiple buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/writev.2.html
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_iovecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The iovec structure array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_nr_vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the iovec array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offest from where to start writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="592" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="260" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a9dab008262a7ecefab72f7f3eabbaf60" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::recv</definition>
        <argsstring>(int _sockfd, std::span&lt; std::byte &gt; _buffer, int _flags, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>recv</name>
        <param>
          <type>int</type>
          <declname>_sockfd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Receive a message from a socket. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://man7.org/linux/man-pages/man2/recv.2.html">https://man7.org/linux/man-pages/man2/recv.2.html</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to receive into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply to the read operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of the <computeroutput>::recv()</computeroutput> operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="614" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="614" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a40d164ebf02b0d6f5558297a20256348" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::recv</definition>
        <argsstring>(io_event *_cancel_token, int _sockfd, std::span&lt; std::byte &gt; _buffer, int _flags) noexcept</argsstring>
        <name>recv</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_sockfd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <briefdescription>
<para>Receive a message from a socket. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/recv.2.html.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to receive into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply to the read operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="652" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="297" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1afb613cda441bb9e70666c353785c37f9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::send</definition>
        <argsstring>(int _sockfd, std::span&lt; const std::byte &gt; _buffer, int _flags, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>send</name>
        <param>
          <type>int</type>
          <declname>_sockfd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Send a message on a socket. </para>
        </briefdescription>
        <detaileddescription>
<para>: See <ulink url="https://man7.org/linux/man-pages/man2/send.2.html">https://man7.org/linux/man-pages/man2/send.2.html</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to receive into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply to the write operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of the <computeroutput>::send()</computeroutput> operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="672" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="672" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a222eb9a5eb1dd70dd6eccc0eff8530d9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::send</definition>
        <argsstring>(io_event *_cancel_token, int _sockfd, std::span&lt; const std::byte &gt; _buffer, int _flags) noexcept</argsstring>
        <name>send</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_sockfd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <briefdescription>
<para>Send a message on a socket. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/send.2.html.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to receive into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply to the write operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="710" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="314" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1aa75ae5cc57723069ec1a340e70f95486" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::accept</definition>
        <argsstring>(int _sockfd, struct sockaddr *_addr, socklen_t *_addrlen, int _flags, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>accept</name>
        <param>
          <type>int</type>
          <declname>_sockfd</declname>
        </param>
        <param>
          <type>struct sockaddr *</type>
          <declname>_addr</declname>
        </param>
        <param>
          <type>socklen_t *</type>
          <declname>_addrlen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Accept a connection on a socket. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://man7.org/linux/man-pages/man2/accept.2.html">https://man7.org/linux/man-pages/man2/accept.2.html</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The sockaddr to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addrlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sockaddre region. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply to the accept operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of the <computeroutput>::accept()</computeroutput> operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="731" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="731" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1af36c11b1551fa4aea00d37ecb2bda66c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::accept</definition>
        <argsstring>(io_event *_cancel_token, int _sockfd, struct sockaddr *_addr, socklen_t *_addrlen, int _flag_) noexcept</argsstring>
        <name>accept</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_sockfd</declname>
        </param>
        <param>
          <type>struct sockaddr *</type>
          <declname>_addr</declname>
        </param>
        <param>
          <type>socklen_t *</type>
          <declname>_addrlen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flag_</declname>
        </param>
        <briefdescription>
<para>Accept a connection on a socket. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/accept.2.html.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The sockaddr to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addrlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sockaddre region. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply to the accept operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="776" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="331" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a22d59491892f40c908054391a9863e23" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::connect</definition>
        <argsstring>(int _sockfd, const struct sockaddr *_addr, socklen_t _addrlen, cancelation_token *_cancel_token=nullptr) noexcept</argsstring>
        <name>connect</name>
        <param>
          <type>int</type>
          <declname>_sockfd</declname>
        </param>
        <param>
          <type>const struct sockaddr *</type>
          <declname>_addr</declname>
        </param>
        <param>
          <type>socklen_t</type>
          <declname>_addrlen</declname>
        </param>
        <param>
          <type>cancelation_token *</type>
          <declname>_cancel_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Initiate a connection on a socket. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://man7.org/linux/man-pages/man2/connect.2.html">https://man7.org/linux/man-pages/man2/connect.2.html</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The sockaddr to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addrlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sockaddre region. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to a io_event* which will bet set to the cancelation handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return The result of the <computeroutput>::connect()</computeroutput> operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="797" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="797" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a784ef1373186260b642b5f9654b17d88" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::connect</definition>
        <argsstring>(io_event *_cancel_token, int _sockfd, const struct sockaddr *_addr, socklen_t _addrlen) noexcept</argsstring>
        <name>connect</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_sockfd</declname>
        </param>
        <param>
          <type>const struct sockaddr *</type>
          <declname>_addr</declname>
        </param>
        <param>
          <type>socklen_t</type>
          <declname>_addrlen</declname>
        </param>
        <briefdescription>
<para>Initiate a connection on a socket. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>cancel_token-&gt;data</emphasis> will hold the return code of the op. <verbatim>     See https://man7.org/linux/man-pages/man2/connect.2.html.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>A io_event* which will be resumed on completion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The sockaddr to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_addrlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sockaddre region. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="834" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="349" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a46c3cfc5ad79bfacd2339c8cf75e1143" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::cancel_event</definition>
        <argsstring>(cancelation_token _key) noexcept</argsstring>
        <name>cancel_event</name>
        <param>
          <type>cancelation_token</type>
          <declname>_key</declname>
        </param>
        <briefdescription>
<para>Attempt to cancel an operation. </para>
        </briefdescription>
        <detaileddescription>
<para>See <computeroutput>CancelResult</computeroutput> for possible results.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The io handle to cancel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_resume</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to resume or destroy the io_event*. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_cancel_code</parametername>
</parameternamelist>
<parameterdescription>
<para>On resumption, the code to resume the io_event* with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@co_return CancelResult The result of the cancel_event operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="899" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="899" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a2993ed58aad3bc7da8b5da741692480a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::cancel_event</definition>
        <argsstring>(io_event *_cancel_token, cancelation_token _key) noexcept</argsstring>
        <name>cancel_event</name>
        <param>
          <type>io_event *</type>
          <declname>_cancel_token</declname>
        </param>
        <param>
          <type>cancelation_token</type>
          <declname>_key</declname>
        </param>
        <briefdescription>
<para>Intiate a cancel operation. </para>
        </briefdescription>
        <detaileddescription>
<para>This cancel does not attempt to clean up the waiting request.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cancel_token</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to resume once cancel has been attempted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to cancel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="927" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="359" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1ae25e4a78d86f4ed9d4556df11b9b8267" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::submit_pending_events</definition>
        <argsstring>() noexcept</argsstring>
        <name>submit_pending_events</name>
        <briefdescription>
<para>Updater the counter on the submission queue to include any new submission. </para>
        </briefdescription>
        <detaileddescription>
<para>This is done on every pass of the completion qeue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="937" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a0eb6e75b7132b2e4150f239e7558cba3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::dispatch_user_event</definition>
        <argsstring>(user_event _handle) noexcept</argsstring>
        <name>dispatch_user_event</name>
        <param>
          <type>user_event</type>
          <declname>_handle</declname>
        </param>
        <briefdescription>
<para>Submits a user event to the <ref refid="classzab_1_1event__loop" kindref="compound">event_loop</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to submit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="945" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="422" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1aca4da2777fd0a03b164a7776a2f7511d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zab::event_loop::event_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>event_size</name>
        <briefdescription>
<para>The number of user events currently waiting to be handled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::size_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="953" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="953" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a67ff2b4cfb9dce63dd3c7db9b5720440" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::get_stop_function</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_stop_function</name>
        <briefdescription>
<para>Get the stop function for the run time. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a lambda that just calls wake.</para>
<para><simplesect kind="return"><para>A lambda wrapper for wake. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="966" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="966" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a6ace768c190a3d6f2e938dae35d529b7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::run</definition>
        <argsstring>(std::stop_token _st) noexcept</argsstring>
        <name>run</name>
        <param>
          <type>std::stop_token</type>
          <declname>_st</declname>
        </param>
        <briefdescription>
<para>Run the event loop until until signaled be the stop token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_st</parametername>
</parameternamelist>
<parameterdescription>
<para>The stop token. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="980" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="436" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a22d93284b7f42bd4422b3b80be9d772c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::wake</definition>
        <argsstring>(event_loop &amp;_from) noexcept</argsstring>
        <name>wake</name>
        <param>
          <type><ref refid="classzab_1_1event__loop" kindref="compound">event_loop</ref> &amp;</type>
          <declname>_from</declname>
        </param>
        <briefdescription>
<para>Wakes the event loop by inserting a user space event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_from</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1event__loop" kindref="compound">event_loop</ref> to wake up from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="989" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="399" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a93401e92aee2895baa0600cb7b64ca3e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::wake</definition>
        <argsstring>() noexcept</argsstring>
        <name>wake</name>
        <briefdescription>
<para>Wakes the event loop by inserting a user space event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="996" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="412" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a2b0990d425688e0d01b24a6e83d4064e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int zab::event_loop::io_fd</definition>
        <argsstring>() noexcept</argsstring>
        <name>io_fd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="999" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="142" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classzab_1_1event__loop_1a4c4e8a8da66270d9298ae376cd4c44ce" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1event__loop_1ad1d9a5b64efba25fb8d8adde6594c8a2" kindref="member">CancelResult</ref></type>
        <definition>auto zab::event_loop::cancel_code</definition>
        <argsstring>(std::intptr_t _result) noexcept</argsstring>
        <name>cancel_code</name>
        <param>
          <type>std::intptr_t</type>
          <declname>_result</declname>
        </param>
        <briefdescription>
<para>Converts errno error codes into CancelResult. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_result</parametername>
</parameternamelist>
<parameterdescription>
<para>The errno result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CancelResult The corresponding CancelResult. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="859" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="375" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1af6b3ac4716b9194177c12047c24ba020" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr std::string_view</type>
        <definition>static constexpr std::string_view zab::event_loop::cancel_message</definition>
        <argsstring>(CancelResult _result) noexcept</argsstring>
        <name>cancel_message</name>
        <param>
          <type><ref refid="classzab_1_1event__loop_1ad1d9a5b64efba25fb8d8adde6594c8a2" kindref="member">CancelResult</ref></type>
          <declname>_result</declname>
        </param>
        <briefdescription>
<para>Converts CancelResult into a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_result</parametername>
</parameternamelist>
<parameterdescription>
<para>The errno result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CancelResult The corresponding CancelResult message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="868" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="868" bodyend="884"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classzab_1_1event__loop_1a05156c1572ca98a152c82d2a97cedfe8" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1async__function" kindref="compound">async_function</ref></type>
        <definition>async_function zab::event_loop::run_user_space</definition>
        <argsstring>(std::stop_token _st) noexcept</argsstring>
        <name>run_user_space</name>
        <param>
          <type>std::stop_token</type>
          <declname>_st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="1004" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="475" bodyend="514"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class implements a coroutine wrapper for the liburing service. </para>
    </briefdescription>
    <detaileddescription>
<para><verbatim>        Investigate IORING_SETUP_ATTACH_WQ
</verbatim> </para>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="67" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="67" bodyend="1016"/>
    <listofallmembers>
      <member refid="classzab_1_1event__loop_1aa75ae5cc57723069ec1a340e70f95486" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>accept</name></member>
      <member refid="classzab_1_1event__loop_1af36c11b1551fa4aea00d37ecb2bda66c" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>accept</name></member>
      <member refid="classzab_1_1event__loop_1a4c4e8a8da66270d9298ae376cd4c44ce" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>cancel_code</name></member>
      <member refid="classzab_1_1event__loop_1a46c3cfc5ad79bfacd2339c8cf75e1143" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>cancel_event</name></member>
      <member refid="classzab_1_1event__loop_1a2993ed58aad3bc7da8b5da741692480a" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>cancel_event</name></member>
      <member refid="classzab_1_1event__loop_1af6b3ac4716b9194177c12047c24ba020" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>cancel_message</name></member>
      <member refid="classzab_1_1event__loop_1aea840fc16142d566b5454f19421bd4a9" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>cancelation_token</name></member>
      <member refid="classzab_1_1event__loop_1ad1d9a5b64efba25fb8d8adde6594c8a2" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>CancelResult</name></member>
      <member refid="classzab_1_1event__loop_1a78afeb13c60aba9df381d2e05217d513" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>close</name></member>
      <member refid="classzab_1_1event__loop_1afe0d8bec9d0fae6b378f5ba8cb80f248" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>close</name></member>
      <member refid="classzab_1_1event__loop_1a22d59491892f40c908054391a9863e23" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>connect</name></member>
      <member refid="classzab_1_1event__loop_1a784ef1373186260b642b5f9654b17d88" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>connect</name></member>
      <member refid="classzab_1_1event__loop_1a0eb6e75b7132b2e4150f239e7558cba3" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>dispatch_user_event</name></member>
      <member refid="classzab_1_1event__loop_1a9024ff7da0075bc65be27b9268e3c1ea" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>event_loop</name></member>
      <member refid="classzab_1_1event__loop_1aca4da2777fd0a03b164a7776a2f7511d" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>event_size</name></member>
      <member refid="classzab_1_1event__loop_1ada3db2ca1f7f5d716228be7592a63fdd" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>fixed_read</name></member>
      <member refid="classzab_1_1event__loop_1a6d4c3a43014d3a78ad42fc9201685b75" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>fixed_read</name></member>
      <member refid="classzab_1_1event__loop_1a33de05ddf11ac5e1ee42da8bb39e4d31" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>fixed_write</name></member>
      <member refid="classzab_1_1event__loop_1a7c26352c938f372e51611a5905f78e76" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>fixed_write</name></member>
      <member refid="classzab_1_1event__loop_1a67ff2b4cfb9dce63dd3c7db9b5720440" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>get_stop_function</name></member>
      <member refid="classzab_1_1event__loop_1a3825769e5ecdb89698e93e61ddde019b" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>handles_</name></member>
      <member refid="classzab_1_1event__loop_1a3c0d851b986da902783bb4f9d5e44256" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>initialise</name></member>
      <member refid="classzab_1_1event__loop_1a506fc84ad7313723a4d7afda6687a621" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>initialise</name></member>
      <member refid="classzab_1_1event__loop_1a5dc860d461ffc62bca288e8de87815c0" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>io_event</name></member>
      <member refid="classzab_1_1event__loop_1a2b0990d425688e0d01b24a6e83d4064e" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>io_fd</name></member>
      <member refid="classzab_1_1event__loop_1a631391026e3a798279048ce2dc81e0c3" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>kQueueSize</name></member>
      <member refid="classzab_1_1event__loop_1a3238f4d73abbb816be905ce7028f41fc" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>kReadIndex</name></member>
      <member refid="classzab_1_1event__loop_1a57b7982b4c79243d01421551a0fa232a" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>kWriteIndex</name></member>
      <member refid="classzab_1_1event__loop_1a1748edba5bd6259c9e2454fa44d06270" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>mtx_</name></member>
      <member refid="classzab_1_1event__loop_1ae7057597b05ac498692b534632267e20" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>open_at</name></member>
      <member refid="classzab_1_1event__loop_1a6abbb0ec7e2fb0cfc7b867c3f91a6199" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>open_at</name></member>
      <member refid="classzab_1_1event__loop_1ad92141faa9b78d4849824f667f5985ed" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>read</name></member>
      <member refid="classzab_1_1event__loop_1af8b48a54dd7ea706fdd6dbc6f8a707df" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>read</name></member>
      <member refid="classzab_1_1event__loop_1a401bed36487aed0a941b69403584314e" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>read_v</name></member>
      <member refid="classzab_1_1event__loop_1aac55a5c245a5b81a19c7e35ef674657f" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>read_v</name></member>
      <member refid="classzab_1_1event__loop_1a9dab008262a7ecefab72f7f3eabbaf60" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>recv</name></member>
      <member refid="classzab_1_1event__loop_1a40d164ebf02b0d6f5558297a20256348" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>recv</name></member>
      <member refid="classzab_1_1event__loop_1aa82688bbfcdecd9e7028228294b883ee" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>ring_</name></member>
      <member refid="classzab_1_1event__loop_1a6ace768c190a3d6f2e938dae35d529b7" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>run</name></member>
      <member refid="classzab_1_1event__loop_1a05156c1572ca98a152c82d2a97cedfe8" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>run_user_space</name></member>
      <member refid="classzab_1_1event__loop_1afb613cda441bb9e70666c353785c37f9" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>send</name></member>
      <member refid="classzab_1_1event__loop_1a222eb9a5eb1dd70dd6eccc0eff8530d9" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>send</name></member>
      <member refid="classzab_1_1event__loop_1ad2ed9448e644d8d80f61b93fa2ed50cc" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>size_</name></member>
      <member refid="classzab_1_1event__loop_1ae25e4a78d86f4ed9d4556df11b9b8267" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>submit_pending_events</name></member>
      <member refid="classzab_1_1event__loop_1acb6a6f587e70d8aa3fdd347f543c4765" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>use_space_handle_</name></member>
      <member refid="classzab_1_1event__loop_1a5bc5bdb49782e6fa71ed7f905c8acbc8" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>user_event</name></member>
      <member refid="classzab_1_1event__loop_1a51aa6508e6f78b05f6b09edd9c2f6b18" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>user_space_event_fd_</name></member>
      <member refid="classzab_1_1event__loop_1a22d93284b7f42bd4422b3b80be9d772c" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>wake</name></member>
      <member refid="classzab_1_1event__loop_1a93401e92aee2895baa0600cb7b64ca3e" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>wake</name></member>
      <member refid="classzab_1_1event__loop_1a82b15c8f9d283ea69b64f1582fedd7ad" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>write</name></member>
      <member refid="classzab_1_1event__loop_1ad337f08e6d5481c7621714043e3df91e" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>write</name></member>
      <member refid="classzab_1_1event__loop_1aa78a0138d28c98a9e089f7d9396f58f5" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>write_v</name></member>
      <member refid="classzab_1_1event__loop_1a7990c9ddb4789212cc876021738d05a3" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>write_v</name></member>
      <member refid="classzab_1_1event__loop_1a93dcda18bf9fdb34e180b58bb00582c2" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>~event_loop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
