<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1event__loop" kind="class" language="C++" prot="public">
    <compoundname>zab::event_loop</compoundname>
    <includes refid="event__loop_8hpp" local="no">event_loop.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classzab_1_1event__loop_1a5d0e2838123ad0907963fc9e5f31b772" prot="public" static="no" strong="yes">
        <type></type>
        <name>CancelResults</name>
        <enumvalue id="classzab_1_1event__loop_1a5d0e2838123ad0907963fc9e5f31b772a9e2024e27d037d51bb46ef86d2e0ea4d" prot="public">
          <name>kDone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classzab_1_1event__loop_1a5d0e2838123ad0907963fc9e5f31b772ab096e4f92f6c4184d188166e8f156fbb" prot="public">
          <name>kNotFound</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classzab_1_1event__loop_1a5d0e2838123ad0907963fc9e5f31b772a662060693f074df0c3ca4ecae9626990" prot="public">
          <name>kTried</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classzab_1_1event__loop_1a5d0e2838123ad0907963fc9e5f31b772ab62fa3c9492b6dae76c23d6dfa466611" prot="public">
          <name>kFailed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classzab_1_1event__loop_1a5d0e2838123ad0907963fc9e5f31b772a25c2dc47991b3df171ed5192bcf70390" prot="public">
          <name>kUnknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="260" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="260" bodyend="266"/>
      </memberdef>
      <memberdef kind="typedef" id="classzab_1_1event__loop_1ac56a602dcda3544421672c93f8a455dd" prot="public" static="no">
        <type><ref refid="structzab_1_1pause__pack" kindref="compound">pause_pack</ref> *</type>
        <definition>using zab::event_loop::io_handle =  pause_pack*</definition>
        <argsstring></argsstring>
        <name>io_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="69" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classzab_1_1event__loop_1a631391026e3a798279048ce2dc81e0c3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto zab::event_loop::kQueueSize</definition>
        <argsstring></argsstring>
        <name>kQueueSize</name>
        <initializer>= 4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="73" column="35" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1event__loop_1aa82688bbfcdecd9e7028228294b883ee" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; io_uring &gt;</type>
        <definition>std::unique_ptr&lt;io_uring&gt; zab::event_loop::ring_</definition>
        <argsstring></argsstring>
        <name>ring_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="320" column="29" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a504d9ab3f06308865709b3428f8eaec3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::byte &gt;</type>
        <definition>std::vector&lt;std::byte&gt; zab::event_loop::pinned_buffers_</definition>
        <argsstring></argsstring>
        <name>pinned_buffers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="325" column="51" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a5c1869c8b895b2d7d5bf8f80b25fb861" prot="private" static="no" mutable="no">
        <type>std::deque&lt; std::pair&lt; std::span&lt; std::byte &gt;, int &gt; &gt;</type>
        <definition>std::deque&lt;std::pair&lt;std::span&lt;std::byte&gt;, int&gt; &gt; zab::event_loop::free_buffers_</definition>
        <argsstring></argsstring>
        <name>free_buffers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="326" column="24" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a51aa6508e6f78b05f6b09edd9c2f6b18" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int zab::event_loop::user_space_event_fd_</definition>
        <argsstring></argsstring>
        <name>user_space_event_fd_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="331" column="38" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1ad2ed9448e644d8d80f61b93fa2ed50cc" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; std::size_t &gt;</type>
        <definition>std::atomic&lt;std::size_t&gt; zab::event_loop::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="332" column="25" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a1748edba5bd6259c9e2454fa44d06270" prot="private" static="no" mutable="no">
        <type>spin_lock</type>
        <definition>spin_lock zab::event_loop::mtx_</definition>
        <argsstring></argsstring>
        <name>mtx_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="333" column="38" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a9d79775dc5eadac65deab101a1246d39" prot="private" static="no" mutable="no">
        <type>std::deque&lt; event &gt;</type>
        <definition>std::deque&lt;event&gt; zab::event_loop::handles_[2]</definition>
        <argsstring>[2]</argsstring>
        <name>handles_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="334" column="31" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a690c459fa6aea83f9da7e31f461e2e77" prot="private" static="no" mutable="no">
        <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
        <definition>io_handle zab::event_loop::use_space_handle_</definition>
        <argsstring></argsstring>
        <name>use_space_handle_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="335" column="38" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="335" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classzab_1_1event__loop_1a64a41cc6fb1e28c3490a3d3ffae4a395" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int zab::event_loop::kPinSize</definition>
        <argsstring></argsstring>
        <name>kPinSize</name>
        <initializer>= 32767</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="322" column="34" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1ad791c0a406c0341f6c1149864a60a204" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int zab::event_loop::kTotalBuffers</definition>
        <argsstring></argsstring>
        <name>kTotalBuffers</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="323" column="34" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a57b7982b4c79243d01421551a0fa232a" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int zab::event_loop::kWriteIndex</definition>
        <argsstring></argsstring>
        <name>kWriteIndex</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="328" column="34" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1event__loop_1a3238f4d73abbb816be905ce7028f41fc" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int zab::event_loop::kReadIndex</definition>
        <argsstring></argsstring>
        <name>kReadIndex</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="329" column="34" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1event__loop_1a9024ff7da0075bc65be27b9268e3c1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::event_loop::event_loop</definition>
        <argsstring>()</argsstring>
        <name>event_loop</name>
        <briefdescription>
<para>Constructs a new instance that will register to this engine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_engine</parametername>
</parameternamelist>
<parameterdescription>
<para>The engine. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="81" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="101" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a93dcda18bf9fdb34e180b58bb00582c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::event_loop::~event_loop</definition>
        <argsstring>()</argsstring>
        <name>~event_loop</name>
        <briefdescription>
<para>Destroys the object and cleans up the resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="86" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="140" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1aef1f6cef1ba7d8273bae847e5b92c4c9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::open_at</definition>
        <argsstring>(int _dfd, const std::string_view _path, int _flags, mode_t _mode, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>open_at</name>
        <param>
          <type>int</type>
          <declname>_dfd</declname>
        </param>
        <param>
          <type>const std::string_view</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>_mode</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="89" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="179" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a137b09c177df2316f345d4ec99db2b47" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::open_at</definition>
        <argsstring>(io_handle _cancle_token, int _dfd, const std::string_view _path, int _flags, mode_t _mode) noexcept</argsstring>
        <name>open_at</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_dfd</declname>
        </param>
        <param>
          <type>const std::string_view</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="97" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="197" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a4191f78fc5c2bd786070f66743d781c6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::close</definition>
        <argsstring>(int _fd, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>close</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="105" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a1dfe02f82e68f9cda046ec4507f26f36" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::close</definition>
        <argsstring>(io_handle _cancle_token, int _fd) noexcept</argsstring>
        <name>close</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="108" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1aec0f1eedc3db85ca7147a0f18bac11cf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::read</definition>
        <argsstring>(int _fd, std::span&lt; std::byte &gt; _buffer, off_t _offset, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>read</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="111" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="227" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a9862df32dc9a5393170b71d383838e02" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::read</definition>
        <argsstring>(io_handle _cancle_token, int _fd, std::span&lt; std::byte &gt; _buffer, off_t _offset) noexcept</argsstring>
        <name>read</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="118" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="244" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1af9d7b0e54e654f6d83582b04eb42c883" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::fixed_read</definition>
        <argsstring>(int _fd, std::span&lt; std::byte &gt; _buffer, off_t _offset, int _buf_index, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>fixed_read</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_buf_index</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="125" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="297" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a59e5a9e8560353634a56b42951c01a94" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::fixed_read</definition>
        <argsstring>(io_handle _cancle_token, int _fd, std::span&lt; std::byte &gt; _buffer, off_t _offset, int _buf_index) noexcept</argsstring>
        <name>fixed_read</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_buf_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="133" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="316" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a02376b6b07cced37cddb14724b341fd6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::read_v</definition>
        <argsstring>(int _fd, const struct iovec *_iovecs, unsigned _nr_vecs, off_t _offset, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>read_v</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>_iovecs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_nr_vecs</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="141" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="261" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a6ba8e04ead99fe8a0403c0c2c5ca0f54" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::read_v</definition>
        <argsstring>(io_handle _cancle_token, int _fd, const struct iovec *_iovecs, unsigned _nr_vecs, off_t _offset) noexcept</argsstring>
        <name>read_v</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>_iovecs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_nr_vecs</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="149" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="279" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1ad667054ede54dd8a968f170822d00324" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::write</definition>
        <argsstring>(int _fd, std::span&lt; const std::byte &gt; _buffer, off_t _offset, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>write</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="157" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="335" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a00ebd5beb64bc0c1a51117cd70e316f2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::write</definition>
        <argsstring>(io_handle _cancle_token, int _fd, std::span&lt; const std::byte &gt; _buffer, off_t _offset) noexcept</argsstring>
        <name>write</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="164" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="352" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1afff6f31f0505244d9094f4490bf98448" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::fixed_write</definition>
        <argsstring>(int _fd, std::span&lt; const std::byte &gt; _buffer, off_t _offset, int _buf_index, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>fixed_write</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_buf_index</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="171" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="405" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a4dd239bdb8ac3de5529302d3fa40cfc5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::fixed_write</definition>
        <argsstring>(io_handle _cancle_token, int _fd, std::span&lt; const std::byte &gt; _buffer, off_t _offset, int _buf_index) noexcept</argsstring>
        <name>fixed_write</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_buf_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="179" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="424" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a6b304ef590760f9913ce01b6980cffc6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::write_v</definition>
        <argsstring>(int _fd, const struct iovec *_iovecs, unsigned _nr_vecs, off_t _offset, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>write_v</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>_iovecs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_nr_vecs</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="187" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="369" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a349196a781f20f52a2dc3ae7d43445a6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::write_v</definition>
        <argsstring>(io_handle _cancle_token, int _fd, const struct iovec *_iovecs, unsigned _nr_vecs, off_t _offset) noexcept</argsstring>
        <name>write_v</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>const struct iovec *</type>
          <declname>_iovecs</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>_nr_vecs</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="195" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="387" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a1c017a5b7825cb764085945f3f6a5a14" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::recv</definition>
        <argsstring>(int sockfd, std::span&lt; std::byte &gt; _buffer, int _flags, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>recv</name>
        <param>
          <type>int</type>
          <declname>sockfd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="203" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="443" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a12ceab5e19b5274b6c892c7a2a2bd151" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::recv</definition>
        <argsstring>(io_handle _cancle_token, int sockfd, std::span&lt; std::byte &gt; _buffer, int _flags) noexcept</argsstring>
        <name>recv</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sockfd</declname>
        </param>
        <param>
          <type>std::span&lt; std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="210" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="460" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a29a1749c5222d7c3e39ab2387f6b23d9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::send</definition>
        <argsstring>(int sockfd, std::span&lt; const std::byte &gt; _buffer, int _flags, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>send</name>
        <param>
          <type>int</type>
          <declname>sockfd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="217" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="477" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a7ddeacd26cce79963a7d581f324391a8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::send</definition>
        <argsstring>(io_handle _cancle_token, int sockfd, std::span&lt; const std::byte &gt; _buffer, int _flags) noexcept</argsstring>
        <name>send</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sockfd</declname>
        </param>
        <param>
          <type>std::span&lt; const std::byte &gt;</type>
          <declname>_buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="224" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="494" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1aafdb41f9431b8888d8c871958e983b46" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::accept</definition>
        <argsstring>(int _fd, struct sockaddr *_addr, socklen_t *_addrlen, int _flag_, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>accept</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>struct sockaddr *</type>
          <declname>_addr</declname>
        </param>
        <param>
          <type>socklen_t *</type>
          <declname>_addrlen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flag_</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="231" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="511" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1ad051764ed6779e808b8ad177e1b258cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::accept</definition>
        <argsstring>(io_handle _cancle_token, int _fd, struct sockaddr *_addr, socklen_t *_addrlen, int _flag_) noexcept</argsstring>
        <name>accept</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>struct sockaddr *</type>
          <declname>_addr</declname>
        </param>
        <param>
          <type>socklen_t *</type>
          <declname>_addrlen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flag_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="239" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="529" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a430449079ef48139243956127a8d1e17" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; int &gt;</type>
        <definition>simple_future&lt; int &gt; zab::event_loop::connect</definition>
        <argsstring>(int _fd, struct sockaddr *_addr, socklen_t _addrlen, io_handle *_cancle_token=nullptr) noexcept</argsstring>
        <name>connect</name>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>struct sockaddr *</type>
          <declname>_addr</declname>
        </param>
        <param>
          <type>socklen_t</type>
          <declname>_addrlen</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref> *</type>
          <declname>_cancle_token</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="247" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="547" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a24259ab27e826dc7c09b4c094356e96a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::connect</definition>
        <argsstring>(io_handle _cancle_token, int _fd, struct sockaddr *_addr, socklen_t _addrlen) noexcept</argsstring>
        <name>connect</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_cancle_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <param>
          <type>struct sockaddr *</type>
          <declname>_addr</declname>
        </param>
        <param>
          <type>socklen_t</type>
          <declname>_addrlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="254" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="557" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a993f83991b5ffbf7fa2ebf3d108411f2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">guaranteed_future</ref>&lt; CancelResults &gt;</type>
        <definition>auto zab::event_loop::cancel_event</definition>
        <argsstring>(io_handle _key, bool _resume=false, std::uintptr_t _cancel_code=std::numeric_limits&lt; std::uintptr_t &gt;::max() - 1) noexcept</argsstring>
        <name>cancel_event</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_resume</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>std::uintptr_t</type>
          <declname>_cancel_code</declname>
          <defval>std::numeric_limits&lt; std::uintptr_t &gt;::max() - 1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="269" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="567" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1ae25e4a78d86f4ed9d4556df11b9b8267" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::submit_pending_events</definition>
        <argsstring>() noexcept</argsstring>
        <name>submit_pending_events</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="283" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1afd606404e270b80d879a80b339825712" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::user_event</definition>
        <argsstring>(event _handle) noexcept</argsstring>
        <name>user_event</name>
        <param>
          <type>event</type>
          <declname>_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="286" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="658" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1aca4da2777fd0a03b164a7776a2f7511d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zab::event_loop::event_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>event_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="289" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a67ff2b4cfb9dce63dd3c7db9b5720440" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::event_loop::get_stop_function</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_stop_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="295" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="295" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a6ace768c190a3d6f2e938dae35d529b7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::run</definition>
        <argsstring>(std::stop_token _st) noexcept</argsstring>
        <name>run</name>
        <param>
          <type>std::stop_token</type>
          <declname>_st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="304" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="619" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1aba1520833f362c9a83074b42408f0248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::wake</definition>
        <argsstring>()</argsstring>
        <name>wake</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="307" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="608" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1a08fcc03963fab68d5a1181d5da9c21a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::pair&lt; std::span&lt; std::byte &gt;, std::size_t &gt; &gt;</type>
        <definition>std::optional&lt; std::pair&lt; std::span&lt; std::byte &gt;, std::size_t &gt; &gt; zab::event_loop::claim_fixed_buffer</definition>
        <argsstring>()</argsstring>
        <name>claim_fixed_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="310" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="152" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1event__loop_1ab2444c587902438ad86bf8ff689dca51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::release_fixed_buffer</definition>
        <argsstring>(std::pair&lt; std::span&lt; std::byte &gt;, std::size_t &gt; _buffer)</argsstring>
        <name>release_fixed_buffer</name>
        <param>
          <type>std::pair&lt; std::span&lt; std::byte &gt;, std::size_t &gt;</type>
          <declname>_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="313" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classzab_1_1event__loop_1a71699b25ae03cee9ed3004d3c6ab4e69" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::event_loop::clean_up</definition>
        <argsstring>(io_handle _key, bool _resume=false, std::uintptr_t _cancel_code=std::numeric_limits&lt; std::uintptr_t &gt;::max() - 1) noexcept</argsstring>
        <name>clean_up</name>
        <param>
          <type><ref refid="structzab_1_1pause__pack" kindref="compound">io_handle</ref></type>
          <declname>_key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_resume</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>std::uintptr_t</type>
          <declname>_cancel_code</declname>
          <defval>std::numeric_limits&lt; std::uintptr_t &gt;::max() - 1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="276" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="597" bodyend="605"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classzab_1_1event__loop_1a05156c1572ca98a152c82d2a97cedfe8" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1async__function" kindref="compound">async_function</ref></type>
        <definition>async_function zab::event_loop::run_user_space</definition>
        <argsstring>(std::stop_token _st) noexcept</argsstring>
        <name>run_user_space</name>
        <param>
          <type>std::stop_token</type>
          <declname>_st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="318" column="13" bodyfile="/home/donald/rupin/zab/src/event_loop.cpp" bodystart="672" bodyend="716"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class implements an asynchronous <computeroutput>epoll</computeroutput> based descriptor notification service. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/event_loop.hpp" line="65" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/event_loop.hpp" bodystart="65" bodyend="336"/>
    <listofallmembers>
      <member refid="classzab_1_1event__loop_1aafdb41f9431b8888d8c871958e983b46" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>accept</name></member>
      <member refid="classzab_1_1event__loop_1ad051764ed6779e808b8ad177e1b258cd" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>accept</name></member>
      <member refid="classzab_1_1event__loop_1a993f83991b5ffbf7fa2ebf3d108411f2" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>cancel_event</name></member>
      <member refid="classzab_1_1event__loop_1a5d0e2838123ad0907963fc9e5f31b772" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>CancelResults</name></member>
      <member refid="classzab_1_1event__loop_1a08fcc03963fab68d5a1181d5da9c21a1" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>claim_fixed_buffer</name></member>
      <member refid="classzab_1_1event__loop_1a71699b25ae03cee9ed3004d3c6ab4e69" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>clean_up</name></member>
      <member refid="classzab_1_1event__loop_1a4191f78fc5c2bd786070f66743d781c6" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>close</name></member>
      <member refid="classzab_1_1event__loop_1a1dfe02f82e68f9cda046ec4507f26f36" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>close</name></member>
      <member refid="classzab_1_1event__loop_1a430449079ef48139243956127a8d1e17" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>connect</name></member>
      <member refid="classzab_1_1event__loop_1a24259ab27e826dc7c09b4c094356e96a" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>connect</name></member>
      <member refid="classzab_1_1event__loop_1a9024ff7da0075bc65be27b9268e3c1ea" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>event_loop</name></member>
      <member refid="classzab_1_1event__loop_1aca4da2777fd0a03b164a7776a2f7511d" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>event_size</name></member>
      <member refid="classzab_1_1event__loop_1af9d7b0e54e654f6d83582b04eb42c883" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>fixed_read</name></member>
      <member refid="classzab_1_1event__loop_1a59e5a9e8560353634a56b42951c01a94" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>fixed_read</name></member>
      <member refid="classzab_1_1event__loop_1afff6f31f0505244d9094f4490bf98448" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>fixed_write</name></member>
      <member refid="classzab_1_1event__loop_1a4dd239bdb8ac3de5529302d3fa40cfc5" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>fixed_write</name></member>
      <member refid="classzab_1_1event__loop_1a5c1869c8b895b2d7d5bf8f80b25fb861" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>free_buffers_</name></member>
      <member refid="classzab_1_1event__loop_1a67ff2b4cfb9dce63dd3c7db9b5720440" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>get_stop_function</name></member>
      <member refid="classzab_1_1event__loop_1a9d79775dc5eadac65deab101a1246d39" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>handles_</name></member>
      <member refid="classzab_1_1event__loop_1ac56a602dcda3544421672c93f8a455dd" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>io_handle</name></member>
      <member refid="classzab_1_1event__loop_1a64a41cc6fb1e28c3490a3d3ffae4a395" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>kPinSize</name></member>
      <member refid="classzab_1_1event__loop_1a631391026e3a798279048ce2dc81e0c3" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>kQueueSize</name></member>
      <member refid="classzab_1_1event__loop_1a3238f4d73abbb816be905ce7028f41fc" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>kReadIndex</name></member>
      <member refid="classzab_1_1event__loop_1ad791c0a406c0341f6c1149864a60a204" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>kTotalBuffers</name></member>
      <member refid="classzab_1_1event__loop_1a57b7982b4c79243d01421551a0fa232a" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>kWriteIndex</name></member>
      <member refid="classzab_1_1event__loop_1a1748edba5bd6259c9e2454fa44d06270" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>mtx_</name></member>
      <member refid="classzab_1_1event__loop_1aef1f6cef1ba7d8273bae847e5b92c4c9" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>open_at</name></member>
      <member refid="classzab_1_1event__loop_1a137b09c177df2316f345d4ec99db2b47" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>open_at</name></member>
      <member refid="classzab_1_1event__loop_1a504d9ab3f06308865709b3428f8eaec3" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>pinned_buffers_</name></member>
      <member refid="classzab_1_1event__loop_1aec0f1eedc3db85ca7147a0f18bac11cf" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>read</name></member>
      <member refid="classzab_1_1event__loop_1a9862df32dc9a5393170b71d383838e02" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>read</name></member>
      <member refid="classzab_1_1event__loop_1a02376b6b07cced37cddb14724b341fd6" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>read_v</name></member>
      <member refid="classzab_1_1event__loop_1a6ba8e04ead99fe8a0403c0c2c5ca0f54" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>read_v</name></member>
      <member refid="classzab_1_1event__loop_1a1c017a5b7825cb764085945f3f6a5a14" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>recv</name></member>
      <member refid="classzab_1_1event__loop_1a12ceab5e19b5274b6c892c7a2a2bd151" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>recv</name></member>
      <member refid="classzab_1_1event__loop_1ab2444c587902438ad86bf8ff689dca51" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>release_fixed_buffer</name></member>
      <member refid="classzab_1_1event__loop_1aa82688bbfcdecd9e7028228294b883ee" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>ring_</name></member>
      <member refid="classzab_1_1event__loop_1a6ace768c190a3d6f2e938dae35d529b7" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>run</name></member>
      <member refid="classzab_1_1event__loop_1a05156c1572ca98a152c82d2a97cedfe8" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>run_user_space</name></member>
      <member refid="classzab_1_1event__loop_1a29a1749c5222d7c3e39ab2387f6b23d9" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>send</name></member>
      <member refid="classzab_1_1event__loop_1a7ddeacd26cce79963a7d581f324391a8" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>send</name></member>
      <member refid="classzab_1_1event__loop_1ad2ed9448e644d8d80f61b93fa2ed50cc" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>size_</name></member>
      <member refid="classzab_1_1event__loop_1ae25e4a78d86f4ed9d4556df11b9b8267" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>submit_pending_events</name></member>
      <member refid="classzab_1_1event__loop_1a690c459fa6aea83f9da7e31f461e2e77" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>use_space_handle_</name></member>
      <member refid="classzab_1_1event__loop_1afd606404e270b80d879a80b339825712" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>user_event</name></member>
      <member refid="classzab_1_1event__loop_1a51aa6508e6f78b05f6b09edd9c2f6b18" prot="private" virt="non-virtual"><scope>zab::event_loop</scope><name>user_space_event_fd_</name></member>
      <member refid="classzab_1_1event__loop_1aba1520833f362c9a83074b42408f0248" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>wake</name></member>
      <member refid="classzab_1_1event__loop_1ad667054ede54dd8a968f170822d00324" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>write</name></member>
      <member refid="classzab_1_1event__loop_1a00ebd5beb64bc0c1a51117cd70e316f2" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>write</name></member>
      <member refid="classzab_1_1event__loop_1a6b304ef590760f9913ce01b6980cffc6" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>write_v</name></member>
      <member refid="classzab_1_1event__loop_1a349196a781f20f52a2dc3ae7d43445a6" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>write_v</name></member>
      <member refid="classzab_1_1event__loop_1a93dcda18bf9fdb34e180b58bb00582c2" prot="public" virt="non-virtual"><scope>zab::event_loop</scope><name>~event_loop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
