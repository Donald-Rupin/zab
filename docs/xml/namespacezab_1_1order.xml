<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacezab_1_1order" kind="namespace" language="C++">
    <compoundname>zab::order</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacezab_1_1order_1a999b1309aeb26e6ed1c4873e27b7b28c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref></type>
        <definition>constexpr order_t zab::order::seconds</definition>
        <argsstring>(std::uint64_t _number) noexcept</argsstring>
        <name>seconds</name>
        <param>
          <type>std::uint64_t</type>
          <declname>_number</declname>
        </param>
        <briefdescription>
<para>Get an <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> for _number seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref>{_number * 1000000000} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="270" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="namespacezab_1_1order_1a211983aac9a71263879996e66d374d6e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref></type>
        <definition>constexpr order_t zab::order::in_seconds</definition>
        <argsstring>(std::uint64_t _number) noexcept</argsstring>
        <name>in_seconds</name>
        <param>
          <type>std::uint64_t</type>
          <declname>_number</declname>
        </param>
        <briefdescription>
<para>Get an <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> for _number seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref>{_number * 1000000000} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="282" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespacezab_1_1order_1abc9e62000fe7258d27470383829dbda6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref></type>
        <definition>constexpr order_t zab::order::milli</definition>
        <argsstring>(std::uint64_t _number) noexcept</argsstring>
        <name>milli</name>
        <param>
          <type>std::uint64_t</type>
          <declname>_number</declname>
        </param>
        <briefdescription>
<para>Get an <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> for _number milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref>{_number * 1000000} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="294" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="namespacezab_1_1order_1a16c34a396aa5bdcea7a1cd697f2b90c7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref></type>
        <definition>constexpr order_t zab::order::in_milli</definition>
        <argsstring>(std::uint64_t _number) noexcept</argsstring>
        <name>in_milli</name>
        <param>
          <type>std::uint64_t</type>
          <declname>_number</declname>
        </param>
        <briefdescription>
<para>Get an <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> for _number milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref>{_number * 1000000} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="306" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="namespacezab_1_1order_1a8f4040b70c6aa1d7831db4bdc8a4b5df" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref></type>
        <definition>constexpr order_t zab::order::now</definition>
        <argsstring>() noexcept</argsstring>
        <name>now</name>
        <briefdescription>
<para>Get an <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> that represents now. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>constexpr <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref>{}; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="317" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="317" bodyend="320"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Namespace for <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> based helper functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="261" column="5"/>
  </compounddef>
</doxygen>
