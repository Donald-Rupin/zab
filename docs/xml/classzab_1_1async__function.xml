<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1async__function" kind="class" language="C++" prot="public">
    <compoundname>zab::async_function</compoundname>
    <includes refid="async__function_8hpp" local="no">async_function.hpp</includes>
    <templateparamlist>
      <param>
        <type>details::Execution</type>
        <declname>PromiseType</declname>
        <defname>PromiseType</defname>
        <defval><ref refid="classzab_1_1execution__promise" kindref="compound">execution_promise</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classzab_1_1async__function_1a06c04dc6889cfd7fcdf30fdbd4877ddf" prot="public" static="no">
        <type>PromiseType</type>
        <definition>using zab::async_function&lt; PromiseType &gt;::promise_type =  PromiseType</definition>
        <argsstring></argsstring>
        <name>promise_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_function.hpp" line="95" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_function.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzab_1_1async__function_1a827b6d2721f118ac8cbbcba5abf1453d" prot="public" static="no">
        <type>std::coroutine_handle&lt; promise_type &gt;</type>
        <definition>using zab::async_function&lt; PromiseType &gt;::coro_handle =  std::coroutine_handle&lt;promise_type&gt;</definition>
        <argsstring></argsstring>
        <name>coro_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_function.hpp" line="98" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_function.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1async__function_1ae84a4af8e04058ba1da713b0c84ab546" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::async_function&lt; PromiseType &gt;::async_function</definition>
        <argsstring>(coro_handle)</argsstring>
        <name>async_function</name>
        <param>
          <type>coro_handle</type>
        </param>
        <briefdescription>
<para>Constructor no-ops. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">&lt;unnamed&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_function.hpp" line="106" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_function.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__function_1a00eb29781f729438d17738623406c237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::async_function&lt; PromiseType &gt;::~async_function</definition>
        <argsstring>()=default</argsstring>
        <name>~async_function</name>
        <briefdescription>
<para>Default clean this object up. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_function.hpp" line="111" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__function_1a38a712173e72924f7ef3b59b5b396378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::async_function&lt; PromiseType &gt;::async_function</definition>
        <argsstring>(const async_function &amp;)=delete</argsstring>
        <name>async_function</name>
        <param>
          <type>const <ref refid="classzab_1_1async__function" kindref="compound">async_function</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Deleted copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">&lt;unnamed&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_function.hpp" line="119" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__function_1aaa0e1544a5a4dcf3ca24f64a78d7fded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::async_function&lt; PromiseType &gt;::async_function</definition>
        <argsstring>(async_function &amp;&amp;)=delete</argsstring>
        <name>async_function</name>
        <param>
          <type><ref refid="classzab_1_1async__function" kindref="compound">async_function</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Deleted move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">&lt;unnamed&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_function.hpp" line="127" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__function_1a01eb2126350ff5168c9c13da0c66d476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzab_1_1async__function" kindref="compound">async_function</ref> &amp;</type>
        <definition>async_function&amp; zab::async_function&lt; PromiseType &gt;::operator=</definition>
        <argsstring>(const async_function &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classzab_1_1async__function" kindref="compound">async_function</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Deleted Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">&lt;unnamed&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>this</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_function.hpp" line="137" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class describes an asynchronous function. </para>
    </briefdescription>
    <detaileddescription>
<para>This classed should only be used as the return type of a function to enable coroutines. It should never be stored and only kept as a tempory object.</para>
<para>For example: ``` auto foo() -&gt; <ref refid="classzab_1_1async__function" kindref="compound">async_function</ref> { async behaviour };</para>
<para>void bar() { ... foo(); ... } </para>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/async_function.hpp" line="91" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/async_function.hpp" bodystart="91" bodyend="138"/>
    <listofallmembers>
      <member refid="classzab_1_1async__function_1ae84a4af8e04058ba1da713b0c84ab546" prot="public" virt="non-virtual"><scope>zab::async_function</scope><name>async_function</name></member>
      <member refid="classzab_1_1async__function_1a38a712173e72924f7ef3b59b5b396378" prot="public" virt="non-virtual"><scope>zab::async_function</scope><name>async_function</name></member>
      <member refid="classzab_1_1async__function_1aaa0e1544a5a4dcf3ca24f64a78d7fded" prot="public" virt="non-virtual"><scope>zab::async_function</scope><name>async_function</name></member>
      <member refid="classzab_1_1async__function_1a827b6d2721f118ac8cbbcba5abf1453d" prot="public" virt="non-virtual"><scope>zab::async_function</scope><name>coro_handle</name></member>
      <member refid="classzab_1_1async__function_1a01eb2126350ff5168c9c13da0c66d476" prot="public" virt="non-virtual"><scope>zab::async_function</scope><name>operator=</name></member>
      <member refid="classzab_1_1async__function_1a06c04dc6889cfd7fcdf30fdbd4877ddf" prot="public" virt="non-virtual"><scope>zab::async_function</scope><name>promise_type</name></member>
      <member refid="classzab_1_1async__function_1a00eb29781f729438d17738623406c237" prot="public" virt="non-virtual"><scope>zab::async_function</scope><name>~async_function</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
