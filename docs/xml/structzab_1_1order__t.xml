<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structzab_1_1order__t" kind="struct" language="C++" prot="public">
    <compoundname>zab::order_t</compoundname>
    <includes refid="strong__types_8hpp" local="no">strong_types.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structzab_1_1order__t_1a5ce9c350dfca9f6e0dc7c6de82bdc750" prot="public" static="no" mutable="no">
        <type>std::uint64_t</type>
        <definition>std::uint64_t zab::order_t::order_</definition>
        <argsstring></argsstring>
        <name>order_</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The amount of time in nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="207" column="27" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structzab_1_1order__t_1af8e31b771fc4b2b02465f6ab14b0bfdb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto zab::order_t::operator&lt;=&gt;</definition>
        <argsstring>(const order_t &amp;_other) const</argsstring>
        <name>operator&lt;=&gt;</name>
        <param>
          <type>const <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref> &amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>3-way operator for a std::strong_ordering </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="213" column="23" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="structzab_1_1order__t_1a8912f376c423bd4b12b3cbde2007298d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>Integral</declname>
            <defname>Integral</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto zab::order_t::operator&lt;=&gt;</definition>
        <argsstring>(const Integral _number) const</argsstring>
        <name>operator&lt;=&gt;</name>
        <param>
          <type>const Integral</type>
          <declname>_number</declname>
        </param>
        <briefdescription>
<para>3-way operator with a std::integral for a std::strong_ordering </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="224" column="23" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="225" bodyend="228"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structzab_1_1order__t_1ad12cf7dc070cadbda534bfab4fc239f2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr friend auto</type>
        <definition>constexpr friend auto operator+</definition>
        <argsstring>(order_t _lhs, order_t _rhs) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structzab_1_1order__t" kindref="compound">order_t</ref></type>
          <declname>_lhs</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1order__t" kindref="compound">order_t</ref></type>
          <declname>_rhs</declname>
        </param>
        <briefdescription>
<para>Add two <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref>&apos;s together. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The lhs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The rhs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr auto <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref>{<emphasis>lhs.order</emphasis> + <emphasis>rhs.order</emphasis>} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="238" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="friend" id="structzab_1_1order__t_1a36e9ae74c43492032921bd0a23456d48" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr friend auto</type>
        <definition>constexpr friend auto operator-</definition>
        <argsstring>(order_t _lhs, order_t _rhs) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structzab_1_1order__t" kindref="compound">order_t</ref></type>
          <declname>_lhs</declname>
        </param>
        <param>
          <type><ref refid="structzab_1_1order__t" kindref="compound">order_t</ref></type>
          <declname>_rhs</declname>
        </param>
        <briefdescription>
<para>subtract two <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref>&apos;s together. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The lhs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The rhs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr auto <ref refid="structzab_1_1order__t" kindref="compound">order_t</ref>{<emphasis>lhs.order</emphasis> - <emphasis>rhs.order</emphasis>} </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="251" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="251" bodyend="254"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A struct for providing strict typing for timing. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="201" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="201" bodyend="255"/>
    <listofallmembers>
      <member refid="structzab_1_1order__t_1ad12cf7dc070cadbda534bfab4fc239f2" prot="public" virt="non-virtual"><scope>zab::order_t</scope><name>operator+</name></member>
      <member refid="structzab_1_1order__t_1a36e9ae74c43492032921bd0a23456d48" prot="public" virt="non-virtual"><scope>zab::order_t</scope><name>operator-</name></member>
      <member refid="structzab_1_1order__t_1af8e31b771fc4b2b02465f6ab14b0bfdb" prot="public" virt="non-virtual"><scope>zab::order_t</scope><name>operator&lt;=&gt;</name></member>
      <member refid="structzab_1_1order__t_1a8912f376c423bd4b12b3cbde2007298d" prot="public" virt="non-virtual"><scope>zab::order_t</scope><name>operator&lt;=&gt;</name></member>
      <member refid="structzab_1_1order__t_1a5ce9c350dfca9f6e0dc7c6de82bdc750" prot="public" virt="non-virtual"><scope>zab::order_t</scope><name>order_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
