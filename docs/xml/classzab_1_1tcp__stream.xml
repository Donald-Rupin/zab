<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1tcp__stream" kind="class" language="C++" prot="public">
    <compoundname>zab::tcp_stream</compoundname>
    <includes refid="tcp__stream_8hpp" local="no">tcp_stream.hpp</includes>
    <templateparamlist>
      <param>
        <type>MemoryType</type>
        <declname>DataType</declname>
        <defname>DataType</defname>
        <defval>std::byte</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classzab_1_1tcp__stream_1a6d105eebcdffe8a55670aa38a410832b" prot="public" static="no">
        <type>network_operation::net_op</type>
        <definition>using zab::tcp_stream&lt; DataType &gt;::net_op =  network_operation::net_op</definition>
        <argsstring></argsstring>
        <name>net_op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="70" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classzab_1_1tcp__stream_1ad51c0d396bac755654e48105e0ff8ae6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto zab::tcp_stream&lt; DataType &gt;::kMaxWrite</definition>
        <argsstring></argsstring>
        <name>kMaxWrite</name>
        <initializer>= std::numeric_limits&lt;std::uint16_t&gt;::max()</initializer>
        <briefdescription>
<para>The maximum a write_some operation will write to a stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="76" column="35" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1tcp__stream_1ae35575e2b2150f3339c343b459e05062" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto zab::tcp_stream&lt; DataType &gt;::kMaxRead</definition>
        <argsstring></argsstring>
        <name>kMaxRead</name>
        <initializer>= std::numeric_limits&lt;int&gt;::max() - 2</initializer>
        <briefdescription>
<para>The maximum a read_some operation will write to a stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="82" column="35" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1tcp__stream_1a2d9a6f362f1cec39e81fd360a4a07fc1" prot="private" static="no" mutable="no">
        <type><ref refid="classzab_1_1network__operation" kindref="compound">network_operation</ref></type>
        <definition>network_operation zab::tcp_stream&lt; DataType &gt;::net_op_</definition>
        <argsstring></argsstring>
        <name>net_op_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="570" column="31" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1tcp__stream_1a628b4bb0879fba7d8c3b8013464931ad" prot="private" static="no" mutable="no">
        <type>net_op *</type>
        <definition>net_op* zab::tcp_stream&lt; DataType &gt;::write_cancel_</definition>
        <argsstring></argsstring>
        <name>write_cancel_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="571" column="30" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="571" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1tcp__stream_1ab46f44caecb7e853b81eb1aa3acc4c5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_stream&lt; DataType &gt;::tcp_stream</definition>
        <argsstring>()</argsstring>
        <name>tcp_stream</name>
        <briefdescription>
<para>Construct a tcp stream object in an empty state. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this object from this constructor is undefined behaviour unless you are writing to it via a swap, a move or move assignment. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="90" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a70a17d99e5966cbd9c75b96e35e98e06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_stream&lt; DataType &gt;::tcp_stream</definition>
        <argsstring>(engine *_engine, int _fd)</argsstring>
        <name>tcp_stream</name>
        <param>
          <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
          <declname>_engine</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <briefdescription>
<para>Construct a new tcp stream object associated with a engine and an socket descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>This interface assumes the socket was created in blocking mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_engine</parametername>
</parameternamelist>
<parameterdescription>
<para>The engine to used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket to used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="101" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a4022182e2734441e4b0928c9953fc507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_stream&lt; DataType &gt;::tcp_stream</definition>
        <argsstring>(const tcp_stream &amp;)=delete</argsstring>
        <name>tcp_stream</name>
        <param>
          <type>const <ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref> &amp;</type>
        </param>
        <briefdescription>
<para>There is no copy constructor for a <ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="107" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a2f541f55b6408f7ca9a62da5f5eb7b62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_stream&lt; DataType &gt;::tcp_stream</definition>
        <argsstring>(tcp_stream &amp;&amp;_move)</argsstring>
        <name>tcp_stream</name>
        <param>
          <type><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref> &amp;&amp;</type>
          <declname>_move</declname>
        </param>
        <briefdescription>
<para>Construct a new tcp stream object by swapping the resources owned by _move. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_move</parametername>
</parameternamelist>
<parameterdescription>
<para>The tcp stream to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="115" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a8e35daab6c9288cff3b53bf9866b08f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_stream&lt; DataType &gt;::~tcp_stream</definition>
        <argsstring>()</argsstring>
        <name>~tcp_stream</name>
        <briefdescription>
<para>Destroy the tcp stream object. </para>
        </briefdescription>
        <detaileddescription>
<para>It is far more efficient to manually shutdown, cancel reads and writes and close the socket before the object is deconstructed. Failure to do so will spawn background fibres to do this in the background.</para>
<para>We first try to cancel any pending writes in the background. The clear any errors from the socket.</para>
<para>The deconstruction of net_op_ will cancel any pending reads and close the socket in the background. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="131" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="131" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a1c9ce25f4dc7cb901b13dfcbccd531c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref> &amp;</type>
        <definition>tcp_stream&amp; zab::tcp_stream&lt; DataType &gt;::operator=</definition>
        <argsstring>(tcp_stream &amp;&amp;tcp_stream)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref> &amp;&amp;</type>
          <declname>tcp_stream</declname>
        </param>
        <briefdescription>
<para>Move operator for a tcp stream. This will just swap to two streams. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream to swap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref>&amp; this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="189" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a01805eadfc53e878ecc20b339aefffa9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int zab::tcp_stream&lt; DataType &gt;::descriptor</definition>
        <argsstring>() const noexcept</argsstring>
        <name>descriptor</name>
        <briefdescription>
<para>Get the underlying socket descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="219" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a8a02a0d7519b768f2ca0c705f2d0f71d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int zab::tcp_stream&lt; DataType &gt;::last_error</definition>
        <argsstring>() noexcept</argsstring>
        <name>last_error</name>
        <briefdescription>
<para>Get the last error. </para>
        </briefdescription>
        <detaileddescription>
<para>This clears the error.</para>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="232" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1acd76147d8dc8816c161235d73a4eee49" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::tcp_stream&lt; DataType &gt;::set_error</definition>
        <argsstring>(int _error) noexcept</argsstring>
        <name>set_error</name>
        <param>
          <type>int</type>
          <declname>_error</declname>
        </param>
        <briefdescription>
<para>Set the error for the stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_error</parametername>
</parameternamelist>
<parameterdescription>
<para>The error to set for the stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="243" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a38160b75114221e1a51926e9bf05b6ae" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::tcp_stream&lt; DataType &gt;::cancel_read</definition>
        <argsstring>() noexcept</argsstring>
        <name>cancel_read</name>
        <briefdescription>
<para>Attempt to cancel the current read operation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function only suspends if there is a pending read operation.</para>
<para>@co_return void Resumes after cancelation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="256" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1ab50a6c85d17d8a2e1d11a1deb6ad8a18" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::tcp_stream&lt; DataType &gt;::cancel_write</definition>
        <argsstring>() noexcept</argsstring>
        <name>cancel_write</name>
        <briefdescription>
<para>Attempt to cancel the current write operation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function only suspends if there is a pending write operation.</para>
<para>@co_return void Resumes after cancelation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="269" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1aaaa427e34ffd07b5819ce53273ed5595" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::tcp_stream&lt; DataType &gt;::close</definition>
        <argsstring>() noexcept</argsstring>
        <name>close</name>
        <briefdescription>
<para>Attempt to close the socket. </para>
        </briefdescription>
        <detaileddescription>
<para>This function only suspends if there is a socket to close.</para>
<para>@co_return true The socket was successfully closed. @co_return false The socket failed to close. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="284" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="284" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1aefceeef819a636598ca89f7a6c2af12d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref></type>
        <definition>simple_future zab::tcp_stream&lt; DataType &gt;::shutdown</definition>
        <argsstring>() noexcept</argsstring>
        <name>shutdown</name>
        <briefdescription>
<para>Shutdown the stream by cancelling any pending operations and signalling shutdown. </para>
        </briefdescription>
        <detaileddescription>
<para>@co_return void on shutdown completion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="306" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="306" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a0b39d1dd6e5cc5760b6eaaf151908dc2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::tcp_stream&lt; DataType &gt;::read_some</definition>
        <argsstring>(std::span&lt; DataType &gt; _data, size_t _offset=0, int _flags=0) noexcept</argsstring>
        <name>read_some</name>
        <param>
          <type>std::span&lt; DataType &gt;</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Attempt to read up to <computeroutput>_data.size() - _offset</computeroutput> bytes into the span at the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para>If _data.size() - _offset is larger then kMaxRead, then kMaxRead is used as the max.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset from where to start reading in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Any flags to pass to recv. @co_return int The amount of bytes read or -1 if an error occurred. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="341" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="341" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1a4e93dcb7788a1c1b0875cead36ff79e9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::tcp_stream&lt; DataType &gt;::read</definition>
        <argsstring>(std::span&lt; DataType &gt; _data, size_t _offset=0, int _flags=0) noexcept</argsstring>
        <name>read</name>
        <param>
          <type>std::span&lt; DataType &gt;</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Attempts to <computeroutput>_data.size() - _offset</computeroutput> bytes into the span at the given offset. Blocks until the amount is read, a signal interupts the call or an error occurs. </para>
        </briefdescription>
        <detaileddescription>
<para>If _data.size() - _offset is larger then kMaxRead, then kMaxRead is used as the max.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset from where to start reading in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Any flags to pass to recv. @co_return long long The amount of bytes read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="391" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="391" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1ad44ddeb402d85e442f35039d12125050" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::tcp_stream&lt; DataType &gt;::write_some</definition>
        <argsstring>(std::span&lt; const DataType &gt; _data, size_t _offset=0, int _flags=MSG_NOSIGNAL) noexcept</argsstring>
        <name>write_some</name>
        <param>
          <type>std::span&lt; const DataType &gt;</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
          <defval>MSG_NOSIGNAL</defval>
        </param>
        <briefdescription>
<para>Attempt to write up to <computeroutput>_data.size() - _offset</computeroutput> bytes from the span at the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para>If _data.size() - _offset is larger then kMaxWrite, then kMaxWrite is used as the max.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset from where to start writing from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Any flags to pass to send. MSG_NOSIGNAL is always set additionally. @co_return int The amount of bytes written or -1 if an error occurred. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="450" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="450" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__stream_1af1fc29720fdb54eb4b36785a06b2fde0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::tcp_stream&lt; DataType &gt;::write</definition>
        <argsstring>(std::span&lt; const DataType &gt; _data, size_t _offset=0, int _flags=MSG_NOSIGNAL) noexcept</argsstring>
        <name>write</name>
        <param>
          <type>std::span&lt; const DataType &gt;</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
          <defval>MSG_NOSIGNAL</defval>
        </param>
        <briefdescription>
<para>Attempt to write up to <computeroutput>_data.size() - _offset</computeroutput> bytes from the span at the given offset. Blocks until the amount is written or an error occurs. </para>
        </briefdescription>
        <detaileddescription>
<para>If _data.size() - _offset is larger then kMaxWrite, then kMaxWrite is used as the max.</para>
<para>Coroutine chaining can be expensive exspecially if the call to <computeroutput><ref refid="classzab_1_1tcp__stream_1af1fc29720fdb54eb4b36785a06b2fde0" kindref="member">write()</ref></computeroutput> is within a hotpath. As such, if the writing is not in a hotpath or are in not performance critical parts of the program <computeroutput><ref refid="classzab_1_1tcp__stream_1af1fc29720fdb54eb4b36785a06b2fde0" kindref="member">write()</ref></computeroutput> is encrouaged for readability an maintainabilty. Otherwise authors are encoruged to use write_some and handle their own logic for when the incorrect amount is written.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset from where to start writing from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Any flags to pass to send. MSG_NOSIGNAL is always set additionaly. @co_return long long The amount of bytes written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="508" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="508" bodyend="555"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classzab_1_1tcp__stream_1a03fc3b73f180c78d779f784d9d57e40a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MemoryType</type>
            <declname>DT1</declname>
            <defname>DT1</defname>
          </param>
          <param>
            <type>MemoryType</type>
            <declname>DT2</declname>
            <defname>DT2</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(tcp_stream&lt; DT1 &gt; &amp;_first, tcp_stream&lt; DT2 &gt; &amp;_second) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref>&lt; DT1 &gt; &amp;</type>
          <declname>_first</declname>
        </param>
        <param>
          <type><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref>&lt; DT2 &gt; &amp;</type>
          <declname>_second</declname>
        </param>
        <briefdescription>
<para>Swaps two tcp streams. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DT1</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory type of the first one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DT2</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory type of the second one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The second stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="159" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="159" bodyend="164"/>
      </memberdef>
      <memberdef kind="friend" id="classzab_1_1tcp__stream_1acbedfae9e2dfba2936867a32e6e0a08b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MemoryType</type>
            <declname>DT1</declname>
            <defname>DT1</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(tcp_stream&lt; DT1 &gt; &amp;_first, tcp_stream&lt; DT1 &gt; &amp;_second) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref>&lt; DT1 &gt; &amp;</type>
          <declname>_first</declname>
        </param>
        <param>
          <type><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref>&lt; DT1 &gt; &amp;</type>
          <declname>_second</declname>
        </param>
        <briefdescription>
<para>Swaps two tcp streams. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DT1</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory type of the first one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The second stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="175" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="175" bodyend="180"/>
      </memberdef>
      <memberdef kind="friend" id="classzab_1_1tcp__stream_1a16137436d23cf62c5fb16495442a6eba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MemoryType</type>
            <declname>DT1</declname>
            <defname>DT1</defname>
          </param>
          <param>
            <type>MemoryType</type>
            <declname>DT2</declname>
            <defname>DT2</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref>&lt; DT1 &gt;</type>
        <definition>tcp_stream&lt;DT1&gt; rebind</definition>
        <argsstring>(tcp_stream&lt; DT2 &gt; &amp;_other)</argsstring>
        <name>rebind</name>
        <param>
          <type><ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref>&lt; DT2 &gt; &amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Rebinds the memory type of the stream via a swap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DT1</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory type of the resulting stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DT2</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory type of the resulting to swap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream to rebind. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tcp_stream&lt;DT1&gt; The newly typed stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="205" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="205" bodyend="211"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classzab_1_1tcp__stream_1abda62e186fedb4a60a1f9dd0f0327802" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1async__function" kindref="compound">async_function</ref></type>
        <definition>async_function zab::tcp_stream&lt; DataType &gt;::background_cancel_write</definition>
        <argsstring>()</argsstring>
        <name>background_cancel_write</name>
        <briefdescription>
<para>Cancel any pending writes in the background. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>async_function&lt;&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="565" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="565" bodyend="568"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class represents the a duplex network stream for writing and reading data. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataType</parametername>
</parameternamelist>
<parameterdescription>
<para>The MemoryType this stream reads and writes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" line="66" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_stream.hpp" bodystart="66" bodyend="572"/>
    <listofallmembers>
      <member refid="classzab_1_1tcp__stream_1abda62e186fedb4a60a1f9dd0f0327802" prot="private" virt="non-virtual"><scope>zab::tcp_stream</scope><name>background_cancel_write</name></member>
      <member refid="classzab_1_1tcp__stream_1a38160b75114221e1a51926e9bf05b6ae" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>cancel_read</name></member>
      <member refid="classzab_1_1tcp__stream_1ab50a6c85d17d8a2e1d11a1deb6ad8a18" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>cancel_write</name></member>
      <member refid="classzab_1_1tcp__stream_1aaaa427e34ffd07b5819ce53273ed5595" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>close</name></member>
      <member refid="classzab_1_1tcp__stream_1a01805eadfc53e878ecc20b339aefffa9" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>descriptor</name></member>
      <member refid="classzab_1_1tcp__stream_1ae35575e2b2150f3339c343b459e05062" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>kMaxRead</name></member>
      <member refid="classzab_1_1tcp__stream_1ad51c0d396bac755654e48105e0ff8ae6" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>kMaxWrite</name></member>
      <member refid="classzab_1_1tcp__stream_1a8a02a0d7519b768f2ca0c705f2d0f71d" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>last_error</name></member>
      <member refid="classzab_1_1tcp__stream_1a6d105eebcdffe8a55670aa38a410832b" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>net_op</name></member>
      <member refid="classzab_1_1tcp__stream_1a2d9a6f362f1cec39e81fd360a4a07fc1" prot="private" virt="non-virtual"><scope>zab::tcp_stream</scope><name>net_op_</name></member>
      <member refid="classzab_1_1tcp__stream_1a1c9ce25f4dc7cb901b13dfcbccd531c3" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>operator=</name></member>
      <member refid="classzab_1_1tcp__stream_1a4e93dcb7788a1c1b0875cead36ff79e9" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>read</name></member>
      <member refid="classzab_1_1tcp__stream_1a0b39d1dd6e5cc5760b6eaaf151908dc2" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>read_some</name></member>
      <member refid="classzab_1_1tcp__stream_1a16137436d23cf62c5fb16495442a6eba" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>rebind</name></member>
      <member refid="classzab_1_1tcp__stream_1acd76147d8dc8816c161235d73a4eee49" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>set_error</name></member>
      <member refid="classzab_1_1tcp__stream_1aefceeef819a636598ca89f7a6c2af12d" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>shutdown</name></member>
      <member refid="classzab_1_1tcp__stream_1a03fc3b73f180c78d779f784d9d57e40a" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>swap</name></member>
      <member refid="classzab_1_1tcp__stream_1acbedfae9e2dfba2936867a32e6e0a08b" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>swap</name></member>
      <member refid="classzab_1_1tcp__stream_1ab46f44caecb7e853b81eb1aa3acc4c5b" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>tcp_stream</name></member>
      <member refid="classzab_1_1tcp__stream_1a70a17d99e5966cbd9c75b96e35e98e06" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>tcp_stream</name></member>
      <member refid="classzab_1_1tcp__stream_1a4022182e2734441e4b0928c9953fc507" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>tcp_stream</name></member>
      <member refid="classzab_1_1tcp__stream_1a2f541f55b6408f7ca9a62da5f5eb7b62" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>tcp_stream</name></member>
      <member refid="classzab_1_1tcp__stream_1af1fc29720fdb54eb4b36785a06b2fde0" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>write</name></member>
      <member refid="classzab_1_1tcp__stream_1a628b4bb0879fba7d8c3b8013464931ad" prot="private" virt="non-virtual"><scope>zab::tcp_stream</scope><name>write_cancel_</name></member>
      <member refid="classzab_1_1tcp__stream_1ad44ddeb402d85e442f35039d12125050" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>write_some</name></member>
      <member refid="classzab_1_1tcp__stream_1a8e35daab6c9288cff3b53bf9866b08f7" prot="public" virt="non-virtual"><scope>zab::tcp_stream</scope><name>~tcp_stream</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
