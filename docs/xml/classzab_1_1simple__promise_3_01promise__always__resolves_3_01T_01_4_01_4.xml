<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4" kind="class" language="C++" prot="public">
    <compoundname>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">zab::simple_common&lt; simple_promise&lt; promise_always_resolves&lt; T &gt; &gt; &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1ab9b12420e2da4b2688071f4b68d0a341" prot="public" static="no">
        <type>T</type>
        <definition>using zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;::returns =  T</definition>
        <argsstring></argsstring>
        <name>returns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="252" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1ab6b6b253800c51ae62db1cb04e527b73" prot="private" static="no" mutable="no">
        <type>std::optional&lt; returns &gt;</type>
        <definition>std::optional&lt;returns&gt; zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="282" column="27" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1a2e9a2495029244d01adcf4b2c3b72614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;::simple_promise</definition>
        <argsstring>()=default</argsstring>
        <name>simple_promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="254" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1a33066ee7f40ccfef2baeaef2fa53ec50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;::~simple_promise</definition>
        <argsstring>()=default</argsstring>
        <name>~simple_promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="256" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1ae6e6b42def2e4bf6f3e094cd1d6007ab" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>returns &amp;&amp;</type>
        <definition>returns&amp;&amp; zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="259" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1a9d7caaa411c311e5848e277f44dba758" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;::return_value</definition>
        <argsstring>(Args &amp;&amp;... _args) noexcept</argsstring>
        <name>return_value</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>_args</declname>
        </param>
        <briefdescription>
<para>Creates the promised object from some values. </para>
        </briefdescription>
        <detaileddescription>
<para>One day they may support <computeroutput>co_return x y z;</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to construct T with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>The types of the arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="275" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="275" bodyend="278"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="247" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="248" bodyend="283"/>
    <listofallmembers>
      <member refid="classzab_1_1simple__common_1ab772a146a1fadaf56c30f41c68ec9284" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>complete</name></member>
      <member refid="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1ae6e6b42def2e4bf6f3e094cd1d6007ab" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>data</name></member>
      <member refid="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1ab6b6b253800c51ae62db1cb04e527b73" prot="private" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>data_</name></member>
      <member refid="classzab_1_1simple__common_1a4a0978f9233dda5c907155f793db6afe" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>final_suspend</name></member>
      <member refid="classzab_1_1simple__common_1a2fb0f6479190f926a05d1e502dd45a1f" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>get_return_object</name></member>
      <member refid="classzab_1_1simple__common_1acfb27f21499a377ee9d144fa8385a7d6" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>initial_suspend</name></member>
      <member refid="classzab_1_1simple__common_1a71be4e797d23e4099c5036c5876f9845" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>is_complete</name></member>
      <member refid="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1a9d7caaa411c311e5848e277f44dba758" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>return_value</name></member>
      <member refid="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1ab9b12420e2da4b2688071f4b68d0a341" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>returns</name></member>
      <member refid="classzab_1_1simple__common_1a785a7eb5104909f68c4cd80d4d0b2210" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>set_underlying</name></member>
      <member refid="classzab_1_1simple__common_1a8c4fff11d8a379f9c57e633532a5a07d" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>simple_common</name></member>
      <member refid="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1a2e9a2495029244d01adcf4b2c3b72614" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>simple_promise</name></member>
      <member refid="classzab_1_1simple__common_1ad8231a492550fda1e52d2a8e7e69efa8" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>underlying</name></member>
      <member refid="classzab_1_1simple__common_1a65343cd0bce64c263727d5cffe9b5190" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>unhandled_exception</name></member>
      <member refid="classzab_1_1simple__common_1aa0bd8b34ed3ff4603e2ffcc2cf2fadd4" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>~simple_common</name></member>
      <member refid="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4_1a33066ee7f40ccfef2baeaef2fa53ec50" prot="public" virt="non-virtual"><scope>zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</scope><name>~simple_promise</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
