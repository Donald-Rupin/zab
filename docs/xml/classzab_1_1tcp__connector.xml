<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1tcp__connector" kind="class" language="C++" prot="public">
    <compoundname>zab::tcp_connector</compoundname>
    <includes refid="network__overlay_8hpp" local="no">network_overlay.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1tcp__connector_1a8a5152febe166b6642e7948ab3ff7d88" prot="private" static="no" mutable="no">
        <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
        <definition>engine* zab::tcp_connector::engine_</definition>
        <argsstring></argsstring>
        <name>engine_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="359" column="34" bodyfile="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1tcp__connector_1ab5977c41a2835953b7ec9520785288d2" prot="private" static="no" mutable="no">
        <type><ref refid="structzab_1_1pause__pack" kindref="compound">event_loop::io_handle</ref></type>
        <definition>event_loop::io_handle zab::tcp_connector::cancel_token_</definition>
        <argsstring></argsstring>
        <name>cancel_token_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="360" column="35" bodyfile="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1tcp__connector_1ae381a8e8a91a7f1703dfe3fd44f82c27" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int zab::tcp_connector::connection_</definition>
        <argsstring></argsstring>
        <name>connection_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="361" column="35" bodyfile="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1tcp__connector_1a357562563acc081d10101a82a7fafe14" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int zab::tcp_connector::last_error_</definition>
        <argsstring></argsstring>
        <name>last_error_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="362" column="35" bodyfile="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1tcp__connector_1a09b31c3f7fce9683526ced1a0ab7ee2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_connector::tcp_connector</definition>
        <argsstring>()=default</argsstring>
        <name>tcp_connector</name>
        <briefdescription>
<para>Constructs a new instance in an empty state. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>        If this constructor is used, use of `connect`,
        will result in undefined behavior until `register_engine`
        is called with a valid engine.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="247" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1a52e50dc6f894f7994859aa73549dd6a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_connector::tcp_connector</definition>
        <argsstring>(engine *_engine)</argsstring>
        <name>tcp_connector</name>
        <param>
          <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
          <declname>_engine</declname>
        </param>
        <briefdescription>
<para>Constructs a new instance in an empty state but with an engine registered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_engine</parametername>
</parameternamelist>
<parameterdescription>
<para>The engine to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="256" column="13" bodyfile="/home/donald/rupin/zab/src/network_overlay.cpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1ae8650d52b43341abf186aff75369489c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_connector::tcp_connector</definition>
        <argsstring>(tcp_connector &amp;&amp;_move)</argsstring>
        <name>tcp_connector</name>
        <param>
          <type><ref refid="classzab_1_1tcp__connector" kindref="compound">tcp_connector</ref> &amp;&amp;</type>
          <declname>_move</declname>
        </param>
        <briefdescription>
<para>Move construct a new instance. The parameter is essentially swapped with default constructed instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_move</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1tcp__connector" kindref="compound">tcp_connector</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="265" column="13" bodyfile="/home/donald/rupin/zab/src/network_overlay.cpp" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1ab1a5f9f1102967e548e5306aae1bbb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_connector::tcp_connector</definition>
        <argsstring>(const tcp_connector &amp;_copy)=delete</argsstring>
        <name>tcp_connector</name>
        <param>
          <type>const <ref refid="classzab_1_1tcp__connector" kindref="compound">tcp_connector</ref> &amp;</type>
          <declname>_copy</declname>
        </param>
        <briefdescription>
<para>Cant copy it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_copy</parametername>
</parameternamelist>
<parameterdescription>
<para>The copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="273" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1acced5357bc6b4ab6cbf9901b334e03c6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::tcp_connector::register_engine</definition>
        <argsstring>(engine *_engine) noexcept</argsstring>
        <name>register_engine</name>
        <param>
          <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
          <declname>_engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="276" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1a4b082cd9f2362cb89b108ca9b4c26a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzab_1_1tcp__connector" kindref="compound">tcp_connector</ref> &amp;</type>
        <definition>tcp_connector &amp; zab::tcp_connector::operator=</definition>
        <argsstring>(tcp_connector &amp;&amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classzab_1_1tcp__connector" kindref="compound">tcp_connector</ref> &amp;&amp;</type>
          <defname>_connector</defname>
        </param>
        <briefdescription>
<para>Move Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_move</parametername>
</parameternamelist>
<parameterdescription>
<para>The acceptor to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the assignment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="289" column="13" bodyfile="/home/donald/rupin/zab/src/network_overlay.cpp" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1a2ee68c5014c0efa14c76a9c0d8cee1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_connector::~tcp_connector</definition>
        <argsstring>()</argsstring>
        <name>~tcp_connector</name>
        <briefdescription>
<para>Destroys the connector, closing its socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="304" column="13" bodyfile="/home/donald/rupin/zab/src/network_overlay.cpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1a0a793893de57f4c6ed3fd391223f5e26" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; <ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref> &gt;</type>
        <definition>simple_future&lt; tcp_stream &gt; zab::tcp_connector::connect</definition>
        <argsstring>(struct sockaddr_storage *_details, socklen_t _size) noexcept</argsstring>
        <name>connect</name>
        <param>
          <type>struct sockaddr_storage *</type>
          <declname>_details</declname>
        </param>
        <param>
          <type>socklen_t</type>
          <declname>_size</declname>
        </param>
        <briefdescription>
<para>connect to a host. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>        The _details struct can be filled out using `getaddrinfo(3)` and
        passing in the `ai_addr` result member.

        The timeout can be used to resume the suspended coroutine
        early. The number is in nanoseconds and -1 means no timeout.

        `last_error` is set on failure.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_details</parametername>
</parameternamelist>
<parameterdescription>
<para>The host details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the _details struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[through co_await] An optional <ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref> that is set to the accepted connection on success, or std::nullopt on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="324" column="13" bodyfile="/home/donald/rupin/zab/src/network_overlay.cpp" bodystart="330" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1af24084e1e94defe2bfb319bf2a50778f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; bool &gt;</type>
        <definition>simple_future&lt; bool &gt; zab::tcp_connector::cancel</definition>
        <argsstring>()</argsstring>
        <name>cancel</name>
        <briefdescription>
<para>Cancels any opertions suspended. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be called from any thread. <verbatim>        Use of any created `descriptor_op&apos;s` after concellation is undefined
        behaviour.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="336" column="13" bodyfile="/home/donald/rupin/zab/src/network_overlay.cpp" bodystart="177" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1a31c2b980a67d87e5b56a779efa068cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; bool &gt;</type>
        <definition>simple_future&lt; bool &gt; zab::tcp_connector::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="339" column="13" bodyfile="/home/donald/rupin/zab/src/network_overlay.cpp" bodystart="194" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__connector_1aba467f7f70198e09fa5d3075443b2080" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int zab::tcp_connector::last_error</definition>
        <argsstring>() noexcept</argsstring>
        <name>last_error</name>
        <briefdescription>
<para>Retrieve the last value of errno recorded after the acceptor failed an operation. </para>
        </briefdescription>
        <detaileddescription>
<para>This operation also clears the error code.</para>
<para><simplesect kind="return"><para>errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="350" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" bodystart="350" bodyend="355"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classzab_1_1tcp__connector_1ae173939f47613c9e315d00545d02dc6e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(tcp_connector &amp;_first, tcp_connector &amp;_second) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classzab_1_1tcp__connector" kindref="compound">tcp_connector</ref> &amp;</type>
          <declname>_first</declname>
        </param>
        <param>
          <type><ref refid="classzab_1_1tcp__connector" kindref="compound">tcp_connector</ref> &amp;</type>
          <declname>_second</declname>
        </param>
        <briefdescription>
<para>Swap two connectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The second </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="298" column="13" bodyfile="/home/donald/rupin/zab/src/network_overlay.cpp" bodystart="142" bodyend="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class allows for asynchronous client based socket operations. </para>
    </briefdescription>
    <detaileddescription>
<para>The methods of the class are essentially asynchronous equivalents to socket(2) and connect(2) </para>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" line="236" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/network_overlay.hpp" bodystart="236" bodyend="363"/>
    <listofallmembers>
      <member refid="classzab_1_1tcp__connector_1af24084e1e94defe2bfb319bf2a50778f" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>cancel</name></member>
      <member refid="classzab_1_1tcp__connector_1ab5977c41a2835953b7ec9520785288d2" prot="private" virt="non-virtual"><scope>zab::tcp_connector</scope><name>cancel_token_</name></member>
      <member refid="classzab_1_1tcp__connector_1a31c2b980a67d87e5b56a779efa068cee" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>close</name></member>
      <member refid="classzab_1_1tcp__connector_1a0a793893de57f4c6ed3fd391223f5e26" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>connect</name></member>
      <member refid="classzab_1_1tcp__connector_1ae381a8e8a91a7f1703dfe3fd44f82c27" prot="private" virt="non-virtual"><scope>zab::tcp_connector</scope><name>connection_</name></member>
      <member refid="classzab_1_1tcp__connector_1a8a5152febe166b6642e7948ab3ff7d88" prot="private" virt="non-virtual"><scope>zab::tcp_connector</scope><name>engine_</name></member>
      <member refid="classzab_1_1tcp__connector_1aba467f7f70198e09fa5d3075443b2080" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>last_error</name></member>
      <member refid="classzab_1_1tcp__connector_1a357562563acc081d10101a82a7fafe14" prot="private" virt="non-virtual"><scope>zab::tcp_connector</scope><name>last_error_</name></member>
      <member refid="classzab_1_1tcp__connector_1a4b082cd9f2362cb89b108ca9b4c26a95" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>operator=</name></member>
      <member refid="classzab_1_1tcp__connector_1acced5357bc6b4ab6cbf9901b334e03c6" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>register_engine</name></member>
      <member refid="classzab_1_1tcp__connector_1ae173939f47613c9e315d00545d02dc6e" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>swap</name></member>
      <member refid="classzab_1_1tcp__connector_1a09b31c3f7fce9683526ced1a0ab7ee2f" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>tcp_connector</name></member>
      <member refid="classzab_1_1tcp__connector_1a52e50dc6f894f7994859aa73549dd6a5" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>tcp_connector</name></member>
      <member refid="classzab_1_1tcp__connector_1ae8650d52b43341abf186aff75369489c" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>tcp_connector</name></member>
      <member refid="classzab_1_1tcp__connector_1ab1a5f9f1102967e548e5306aae1bbb00" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>tcp_connector</name></member>
      <member refid="classzab_1_1tcp__connector_1a2ee68c5014c0efa14c76a9c0d8cee1c2" prot="public" virt="non-virtual"><scope>zab::tcp_connector</scope><name>~tcp_connector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
