<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1simple__future" kind="class" language="C++" prot="public">
    <compoundname>zab::simple_future</compoundname>
    <includes refid="simple__future_8hpp" local="no">simple_future.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
        <defval>void</defval>
      </param>
      <param>
        <type>details::Returnable</type>
        <declname>Promise</declname>
        <defname>Promise</defname>
        <defval><ref refid="classzab_1_1simple__promise" kindref="compound">simple_promise</ref>&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classzab_1_1simple__future_1a6b12bbb0277df362dace02e01309ad18" prot="public" static="no">
        <type>Promise</type>
        <definition>using zab::simple_future&lt; T, Promise &gt;::promise_type =  Promise</definition>
        <argsstring></argsstring>
        <name>promise_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="134" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzab_1_1simple__future_1a91e861440d91ce4f4b922ce559bedb46" prot="public" static="no">
        <type>typename deduce_type&lt; typename promise_type::returns &gt;::type</type>
        <definition>using zab::simple_future&lt; T, Promise &gt;::return_value =  typename deduce_type&lt;typename promise_type::returns&gt;::type</definition>
        <argsstring></argsstring>
        <name>return_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="137" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classzab_1_1simple__future_1afb9e98d1b6f82130957ca3f1c4287a18" prot="public" static="no" mutable="no">
        <type>std::coroutine_handle&lt; promise_type &gt;</type>
        <definition>std::coroutine_handle&lt;promise_type&gt; zab::simple_future&lt; T, Promise &gt;::handle_</definition>
        <argsstring></argsstring>
        <name>handle_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="217" column="35" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1simple__future_1aac0cfbd30bf388eab5e8f8639994eec1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::simple_future&lt; T, Promise &gt;::simple_future</definition>
        <argsstring>(std::coroutine_handle&lt; promise_type &gt; _handle)</argsstring>
        <name>simple_future</name>
        <param>
          <type>std::coroutine_handle&lt; promise_type &gt;</type>
          <declname>_handle</declname>
        </param>
        <briefdescription>
<para>Construct with the future with a handle to its coroutine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_coroutine</parametername>
</parameternamelist>
<parameterdescription>
<para>The coroutine handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="144" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__future_1a98cf8f925a4d09762e7ef7e66a512424" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::simple_future&lt; T, Promise &gt;::~simple_future</definition>
        <argsstring>()</argsstring>
        <name>~simple_future</name>
        <briefdescription>
<para>Destroys the future and cleans up the coroutine handle. </para>
        </briefdescription>
        <detaileddescription>
<para>We destroy the coroutine handle here as the the final_suspend in the <computeroutput><ref refid="classzab_1_1simple__promise" kindref="compound">simple_promise</ref></computeroutput> does not resume. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="153" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="153" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__future_1ac5e22f4677d863b491688da1af6d5ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::simple_future&lt; T, Promise &gt;::simple_future</definition>
        <argsstring>(const simple_future &amp;_other)=delete</argsstring>
        <name>simple_future</name>
        <param>
          <type>const <ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref> &amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Cannot be coppied. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="170" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__future_1a9ac8bac43943f47fe7c55ec6435bdfb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::simple_future&lt; T, Promise &gt;::simple_future</definition>
        <argsstring>(simple_future &amp;&amp;_other)</argsstring>
        <name>simple_future</name>
        <param>
          <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref> &amp;&amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Moving makes the moved <ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref> lose ownership of the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="178" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__future_1af4e3825377a74a478c6d6b4fdc0dee66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref> &amp;</type>
        <definition>simple_future&amp; zab::simple_future&lt; T, Promise &gt;::operator=</definition>
        <argsstring>(simple_future &amp;&amp;_other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref> &amp;&amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Move Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref> to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="191" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="191" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__future_1a0dd9708c4281d674f4d527e11a9a1fb1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>details::simple_awaitable&lt; promise_type &gt;</type>
        <definition>details::simple_awaitable&lt;promise_type&gt; zab::simple_future&lt; T, Promise &gt;::operator co_await</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
<para>wait for the <computeroutput><ref refid="classzab_1_1simple__promise" kindref="compound">simple_promise</ref></computeroutput> to be fulfilled or fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Then co_await returns an <computeroutput>std::optional&lt;T&gt;&amp;&amp;</computeroutput> which represents if the <ref refid="classzab_1_1simple__promise" kindref="compound">simple_promise</ref> was fulfilled or failed.</para>
<para><simplesect kind="return"><para>A <computeroutput>co_await</computeroutput>&apos;able struct. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="211" column="46" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="211" bodyend="215"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents the future value of a simple promise. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the promised value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/simple_future.hpp" line="129" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/simple_future.hpp" bodystart="129" bodyend="218"/>
    <listofallmembers>
      <member refid="classzab_1_1simple__future_1afb9e98d1b6f82130957ca3f1c4287a18" prot="public" virt="non-virtual"><scope>zab::simple_future</scope><name>handle_</name></member>
      <member refid="classzab_1_1simple__future_1a0dd9708c4281d674f4d527e11a9a1fb1" prot="public" virt="non-virtual"><scope>zab::simple_future</scope><name>operator co_await</name></member>
      <member refid="classzab_1_1simple__future_1af4e3825377a74a478c6d6b4fdc0dee66" prot="public" virt="non-virtual"><scope>zab::simple_future</scope><name>operator=</name></member>
      <member refid="classzab_1_1simple__future_1a6b12bbb0277df362dace02e01309ad18" prot="public" virt="non-virtual"><scope>zab::simple_future</scope><name>promise_type</name></member>
      <member refid="classzab_1_1simple__future_1a91e861440d91ce4f4b922ce559bedb46" prot="public" virt="non-virtual"><scope>zab::simple_future</scope><name>return_value</name></member>
      <member refid="classzab_1_1simple__future_1aac0cfbd30bf388eab5e8f8639994eec1" prot="public" virt="non-virtual"><scope>zab::simple_future</scope><name>simple_future</name></member>
      <member refid="classzab_1_1simple__future_1ac5e22f4677d863b491688da1af6d5ea9" prot="public" virt="non-virtual"><scope>zab::simple_future</scope><name>simple_future</name></member>
      <member refid="classzab_1_1simple__future_1a9ac8bac43943f47fe7c55ec6435bdfb4" prot="public" virt="non-virtual"><scope>zab::simple_future</scope><name>simple_future</name></member>
      <member refid="classzab_1_1simple__future_1a98cf8f925a4d09762e7ef7e66a512424" prot="public" virt="non-virtual"><scope>zab::simple_future</scope><name>~simple_future</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
