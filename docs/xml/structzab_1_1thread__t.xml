<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structzab_1_1thread__t" kind="struct" language="C++" prot="public">
    <compoundname>zab::thread_t</compoundname>
    <includes refid="strong__types_8hpp" local="no">strong_types.hpp</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structzab_1_1thread__t_1a2f161cb6b3e332b4ac5fffa23df942ff" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto zab::thread_t::kAnyThread</definition>
        <argsstring></argsstring>
        <name>kAnyThread</name>
        <initializer>= std::numeric_limits&lt;std::uint16_t&gt;::max() - 1</initializer>
        <briefdescription>
<para>This value signifies either no thread or any thread is allowed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="57" column="35" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structzab_1_1thread__t_1ab127b4494e0ba8f77cb40bfee6a4f794" prot="public" static="no" mutable="no">
        <type>std::uint16_t</type>
        <definition>std::uint16_t zab::thread_t::thread_</definition>
        <argsstring></argsstring>
        <name>thread_</name>
        <initializer>= <ref refid="structzab_1_1thread__t_1a2f161cb6b3e332b4ac5fffa23df942ff" kindref="member">kAnyThread</ref></initializer>
        <briefdescription>
<para>The logical id of the thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="63" column="27" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structzab_1_1thread__t_1a24d1dd67dd5529493217cbd8646f48a6" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref></type>
        <definition>static constexpr thread_t zab::thread_t::any_thread</definition>
        <argsstring>()</argsstring>
        <name>any_thread</name>
        <briefdescription>
<para>Gets a <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref> object with its value initialised to any thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>constexpr <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="71" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="71" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structzab_1_1thread__t_1a40dc50f68e770502c527e1c6f4acd98e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr friend bool</type>
        <definition>constexpr friend bool operator==</definition>
        <argsstring>(const thread_t _first, const thread_t _second)=default</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref></type>
          <declname>_first</declname>
        </param>
        <param>
          <type>const <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref></type>
          <declname>_second</declname>
        </param>
        <briefdescription>
<para>Equality operator is default. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The lhs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The rhs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If equal </para>
</simplesect>
<simplesect kind="return"><para>false If not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="85" column="13"/>
      </memberdef>
      <memberdef kind="friend" id="structzab_1_1thread__t_1ab4783a229d5b780581e8e200fac2869b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr friend bool</type>
        <definition>constexpr friend bool operator!=</definition>
        <argsstring>(const thread_t _first, const thread_t _second)=default</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref></type>
          <declname>_first</declname>
        </param>
        <param>
          <type>const <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref></type>
          <declname>_second</declname>
        </param>
        <briefdescription>
<para>Inequality operator is default. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The lhs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The rhs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If not equal </para>
</simplesect>
<simplesect kind="return"><para>false If equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="96" column="13"/>
      </memberdef>
      <memberdef kind="friend" id="structzab_1_1thread__t_1ae0b484631e0cec16b3bee651972b9b00" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr friend auto</type>
        <definition>constexpr friend auto operator&lt;=&gt;</definition>
        <argsstring>(const thread_t _first, const thread_t _second)</argsstring>
        <name>operator&lt;=&gt;</name>
        <param>
          <type>const <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref></type>
          <declname>_first</declname>
        </param>
        <param>
          <type>const <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref></type>
          <declname>_second</declname>
        </param>
        <briefdescription>
<para>3-way operator is default for a std::strong_ordering. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The lhs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The rhs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="104" column="30" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="friend" id="structzab_1_1thread__t_1a39eaa00209eac8555993971116fdca3f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr friend auto</type>
        <definition>constexpr friend auto operator&lt;=&gt;</definition>
        <argsstring>(const thread_t _first, const T _number)</argsstring>
        <name>operator&lt;=&gt;</name>
        <param>
          <type>const <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref></type>
          <declname>_first</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>_number</declname>
        </param>
        <briefdescription>
<para>3-way operator with a std::integral for a std::strong_ordering. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The lhs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The rhs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="117" column="30" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="friend" id="structzab_1_1thread__t_1a5a1f767b8fba3aa25526fc4d78d433a7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr friend bool</type>
        <definition>constexpr friend bool operator==</definition>
        <argsstring>(const thread_t _first, const T _second)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref></type>
          <declname>_first</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>_second</declname>
        </param>
        <briefdescription>
<para>Equality operator with a std::integral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The lhs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The rhs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If equal </para>
</simplesect>
<simplesect kind="return"><para>false If not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="133" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="friend" id="structzab_1_1thread__t_1ab000b67ab20838ba4c0a084f36d65a49" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr friend bool</type>
        <definition>constexpr friend bool operator!=</definition>
        <argsstring>(const thread_t &amp;_first, const T _second)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structzab_1_1thread__t" kindref="compound">thread_t</ref> &amp;</type>
          <declname>_first</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>_second</declname>
        </param>
        <briefdescription>
<para>Inequality operator with a std::integral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The lhs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The rhs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If equal </para>
</simplesect>
<simplesect kind="return"><para>false If not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="148" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="148" bodyend="151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A struct for providing strict typing of thread ids&apos;. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/strong_types.hpp" line="51" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/strong_types.hpp" bodystart="51" bodyend="152"/>
    <listofallmembers>
      <member refid="structzab_1_1thread__t_1a24d1dd67dd5529493217cbd8646f48a6" prot="public" virt="non-virtual"><scope>zab::thread_t</scope><name>any_thread</name></member>
      <member refid="structzab_1_1thread__t_1a2f161cb6b3e332b4ac5fffa23df942ff" prot="public" virt="non-virtual"><scope>zab::thread_t</scope><name>kAnyThread</name></member>
      <member refid="structzab_1_1thread__t_1ab4783a229d5b780581e8e200fac2869b" prot="public" virt="non-virtual"><scope>zab::thread_t</scope><name>operator!=</name></member>
      <member refid="structzab_1_1thread__t_1ab000b67ab20838ba4c0a084f36d65a49" prot="public" virt="non-virtual"><scope>zab::thread_t</scope><name>operator!=</name></member>
      <member refid="structzab_1_1thread__t_1ae0b484631e0cec16b3bee651972b9b00" prot="public" virt="non-virtual"><scope>zab::thread_t</scope><name>operator&lt;=&gt;</name></member>
      <member refid="structzab_1_1thread__t_1a39eaa00209eac8555993971116fdca3f" prot="public" virt="non-virtual"><scope>zab::thread_t</scope><name>operator&lt;=&gt;</name></member>
      <member refid="structzab_1_1thread__t_1a40dc50f68e770502c527e1c6f4acd98e" prot="public" virt="non-virtual"><scope>zab::thread_t</scope><name>operator==</name></member>
      <member refid="structzab_1_1thread__t_1a5a1f767b8fba3aa25526fc4d78d433a7" prot="public" virt="non-virtual"><scope>zab::thread_t</scope><name>operator==</name></member>
      <member refid="structzab_1_1thread__t_1ab127b4494e0ba8f77cb40bfee6a4f794" prot="public" virt="non-virtual"><scope>zab::thread_t</scope><name>thread_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
