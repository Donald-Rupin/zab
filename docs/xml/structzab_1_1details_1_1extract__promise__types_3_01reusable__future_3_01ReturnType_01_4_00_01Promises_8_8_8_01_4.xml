<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structzab_1_1details_1_1extract__promise__types_3_01reusable__future_3_01ReturnType_01_4_00_01Promises_8_8_8_01_4" kind="struct" language="C++" prot="public">
    <compoundname>zab::details::extract_promise_types&lt; reusable_future&lt; ReturnType &gt;, Promises... &gt;</compoundname>
    <includes refid="wait__for_8hpp" local="no">wait_for.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ReturnType</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Promises</declname>
        <defname>Promises</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structzab_1_1details_1_1extract__promise__types_3_01reusable__future_3_01ReturnType_01_4_00_01Promises_8_8_8_01_4_1ab0647e399b1699c8482395740bab01b8" prot="public" static="no">
        <type><ref refid="namespacezab_1_1details_1a6bdb0ede6bbee3549454e674c34247e2" kindref="member">tuple_cat_t</ref>&lt; std::tuple&lt; typename <ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref>&lt; ReturnType &gt;::return_value &gt;, typename <ref refid="structzab_1_1details_1_1extract__promise__types" kindref="compound">extract_promise_types</ref>&lt; Promises... &gt;::<ref refid="structzab_1_1details_1_1extract__promise__types_3_01reusable__future_3_01ReturnType_01_4_00_01Promises_8_8_8_01_4_1ab0647e399b1699c8482395740bab01b8" kindref="member">types</ref> &gt;</type>
        <definition>using zab::details::extract_promise_types&lt; reusable_future&lt; ReturnType &gt;, Promises... &gt;::types =  tuple_cat_t&lt; std::tuple&lt;typename reusable_future&lt;ReturnType&gt;::return_value&gt;, typename extract_promise_types&lt;Promises...&gt;::types&gt;</definition>
        <argsstring></argsstring>
        <name>types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The concanated types of the font <ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> and the remaining Futures. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="151" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Speicialisation for <ref refid="structzab_1_1details_1_1extract__promise__types" kindref="compound">extract_promise_types</ref> for reusable_futures. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ReturnType</parametername>
</parameternamelist>
<parameterdescription>
<para>The return type of the Future. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Promises</parametername>
</parameternamelist>
<parameterdescription>
<para>The remaining simple_futures </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="145" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="145" bodyend="154"/>
    <listofallmembers>
      <member refid="structzab_1_1details_1_1extract__promise__types_3_01reusable__future_3_01ReturnType_01_4_00_01Promises_8_8_8_01_4_1ab0647e399b1699c8482395740bab01b8" prot="public" virt="non-virtual"><scope>zab::details::extract_promise_types&lt; reusable_future&lt; ReturnType &gt;, Promises... &gt;</scope><name>types</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
