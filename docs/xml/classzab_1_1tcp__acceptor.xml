<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1tcp__acceptor" kind="class" language="C++" prot="public">
    <compoundname>zab::tcp_acceptor</compoundname>
    <basecompoundref refid="classzab_1_1network__operation" prot="public" virt="non-virtual">zab::network_operation</basecompoundref>
    <includes refid="tcp__networking_8hpp" local="no">tcp_networking.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1tcp__acceptor_1a4e5777877a9420fc6135f1d05a927618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_acceptor::tcp_acceptor</definition>
        <argsstring>()=default</argsstring>
        <name>tcp_acceptor</name>
        <briefdescription>
<para>Constructs a new instance in an empty state. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>        If this constructor is used, use of `listen` and `accept`,
        will result in undefined behavior until `register_engine`
        is called with a valid engine.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="80" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__acceptor_1a71c7b568fb16d3b80f53d8b598bc79de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_acceptor::tcp_acceptor</definition>
        <argsstring>(engine *_engine)</argsstring>
        <name>tcp_acceptor</name>
        <param>
          <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
          <declname>_engine</declname>
        </param>
        <briefdescription>
<para>Constructs a new instance in an empty state but with an engine registered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_engine</parametername>
</parameternamelist>
<parameterdescription>
<para>The engine to register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="89" column="13" bodyfile="/home/donald/rupin/zab/src/tcp_networking.cpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__acceptor_1abeda9c49255de19c049e6ce9185e2bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_acceptor::tcp_acceptor</definition>
        <argsstring>(const tcp_acceptor &amp;)=delete</argsstring>
        <name>tcp_acceptor</name>
        <param>
          <type>const <ref refid="classzab_1_1tcp__acceptor" kindref="compound">tcp_acceptor</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor is deleted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="95" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__acceptor_1a660858ada2a1ad05c4eff6fab0066985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_acceptor::tcp_acceptor</definition>
        <argsstring>(tcp_acceptor &amp;&amp;_move)=default</argsstring>
        <name>tcp_acceptor</name>
        <param>
          <type><ref refid="classzab_1_1tcp__acceptor" kindref="compound">tcp_acceptor</ref> &amp;&amp;</type>
          <declname>_move</declname>
        </param>
        <briefdescription>
<para>Moves a <ref refid="classzab_1_1tcp__acceptor" kindref="compound">tcp_acceptor</ref> leaving it in an empty state and no engine registered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_move</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1tcp__acceptor" kindref="compound">tcp_acceptor</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="102" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__acceptor_1a77bfb429be9ef2590f6c2b6b9ddbe512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classzab_1_1tcp__acceptor" kindref="compound">tcp_acceptor</ref> &amp;</type>
        <definition>tcp_acceptor&amp; zab::tcp_acceptor::operator=</definition>
        <argsstring>(tcp_acceptor &amp;&amp;_move)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classzab_1_1tcp__acceptor" kindref="compound">tcp_acceptor</ref> &amp;&amp;</type>
          <declname>_move</declname>
        </param>
        <briefdescription>
<para>Moves a <ref refid="classzab_1_1tcp__acceptor" kindref="compound">tcp_acceptor</ref> leaving it in an empty state and with no engine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_move</parametername>
</parameternamelist>
<parameterdescription>
<para>The acceptor to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the assignment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="112" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__acceptor_1a4068033d276c7ab690010a8f6f69282c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::tcp_acceptor::~tcp_acceptor</definition>
        <argsstring>()=default</argsstring>
        <name>~tcp_acceptor</name>
        <briefdescription>
<para>Destroys the acceptor, closing its socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="127" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__acceptor_1a71422211cbb518344ebeacd8bc4bf00f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zab::tcp_acceptor::listen</definition>
        <argsstring>(int _family, std::uint16_t _port, int _backlog) noexcept</argsstring>
        <name>listen</name>
        <param>
          <type>int</type>
          <declname>_family</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>_port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_backlog</declname>
        </param>
        <briefdescription>
<para>Start listening to connections on a newly created socket. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is essentially creates a new socket using <computeroutput>::socket()</computeroutput>, sets SO_REUSEADDR, then calls <computeroutput>::bind()</computeroutput> and <computeroutput>::listen()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_family</parametername>
</parameternamelist>
<parameterdescription>
<para>AF_INET or AF_INET6 for ipv4 and ipv6 respectively. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_port</parametername>
</parameternamelist>
<parameterdescription>
<para>Which port to listen on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_backlog</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of pending connections to hold. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If started successfully. </para>
</simplesect>
<simplesect kind="return"><para>false If an error occurs. <computeroutput><ref refid="classzab_1_1network__operation_1a0742b6758cb38291ab82729fe3e9f5b8" kindref="member">last_error()</ref></computeroutput> is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="142" column="13" bodyfile="/home/donald/rupin/zab/src/tcp_networking.cpp" bodystart="62" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1tcp__acceptor_1a42efa49ded128eb85d8b633a381cd979" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>MemoryType</type>
            <declname>DataType</declname>
            <defname>DataType</defname>
            <defval>std::byte</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto zab::tcp_acceptor::accept</definition>
        <argsstring>(struct sockaddr *_address, socklen_t *_length, int _flags=SOCK_CLOEXEC) noexcept</argsstring>
        <name>accept</name>
        <param>
          <type>struct sockaddr *</type>
          <declname>_address</declname>
        </param>
        <param>
          <type>socklen_t *</type>
          <declname>_length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
          <defval>SOCK_CLOEXEC</defval>
        </param>
        <briefdescription>
<para>Attempts to accept a connection. </para>
        </briefdescription>
        <detaileddescription>
<para>This function always suspends. <verbatim>     This function is cancelable using the `cancel()` function.

     The function calls `::accept()` on the socket with parameters given.
     The socket produced from this call is used to create a tcp_stream.
</verbatim> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of memory the produced <ref refid="classzab_1_1tcp__stream" kindref="compound">tcp_stream</ref> will use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_address</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to the sockaddr like struct to be filled out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>A ptr to the socklen_t the indicates the memory length of _address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply to the accept call. The default is SOCK_CLOEXEC. See <computeroutput>::accept4()</computeroutput> @co_return tcp_stream&lt;DataType&gt; if no error occurs, or std::nullopt. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="163" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" bodystart="163" bodyend="194"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classzab_1_1tcp__acceptor_1a29193b248e50b7468877453bd96c4547" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(tcp_acceptor &amp;_first, tcp_acceptor &amp;_second) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classzab_1_1tcp__acceptor" kindref="compound">tcp_acceptor</ref> &amp;</type>
          <declname>_first</declname>
        </param>
        <param>
          <type><ref refid="classzab_1_1tcp__acceptor" kindref="compound">tcp_acceptor</ref> &amp;</type>
          <declname>_second</declname>
        </param>
        <briefdescription>
<para>Swap two acceptors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_second</parametername>
</parameternamelist>
<parameterdescription>
<para>The second </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="121" column="13" bodyfile="/home/donald/rupin/zab/src/tcp_networking.cpp" bodystart="55" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class allows for asynchronous server based socket operations. </para>
    </briefdescription>
    <detaileddescription>
<para>The methods of the class are essentially asynchronous equivalents to socket(2), bind(2), listen(2) and accept(2) </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>zab::network_operation</label>
        <link refid="classzab_1_1network__operation"/>
      </node>
      <node id="1">
        <label>zab::tcp_acceptor</label>
        <link refid="classzab_1_1tcp__acceptor"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>zab::network_operation</label>
        <link refid="classzab_1_1network__operation"/>
      </node>
      <node id="1">
        <label>zab::tcp_acceptor</label>
        <link refid="classzab_1_1tcp__acceptor"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" line="69" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/tcp_networking.hpp" bodystart="69" bodyend="195"/>
    <listofallmembers>
      <member refid="classzab_1_1tcp__acceptor_1a42efa49ded128eb85d8b633a381cd979" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>accept</name></member>
      <member refid="classzab_1_1network__operation_1a5c05a4413ff2826f56163c5a981877c6" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>background_cancel</name></member>
      <member refid="classzab_1_1network__operation_1aefb6fe91e7d330d17f211a990312a276" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>background_close</name></member>
      <member refid="classzab_1_1network__operation_1a3fdd2710a10cf95d42e45742fd4cbdcb" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>cancel</name></member>
      <member refid="classzab_1_1network__operation_1a048418e7a1f65150461b31ed1b914fbb" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>cancel</name></member>
      <member refid="classzab_1_1network__operation_1afbe3c3ab80422d29446a68bb92f90825" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>clear_cancel</name></member>
      <member refid="classzab_1_1network__operation_1a623ce5b2f4dc4bdee25b508f242ea643" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>clear_descriptor</name></member>
      <member refid="classzab_1_1network__operation_1a7f7e82c4653f61ef5cd0fdfb748d0a9a" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>clear_error</name></member>
      <member refid="classzab_1_1network__operation_1a538c899b5540cda6204e856912364597" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>close</name></member>
      <member refid="classzab_1_1network__operation_1aa7d4950daf03cb569d55a305cc37e0b5" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>descriptor</name></member>
      <member refid="classzab_1_1network__operation_1a5d7dad8211bc683e0338404222633361" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>get_cancel</name></member>
      <member refid="classzab_1_1network__operation_1a63f74e1e10727a033e3df9636279a8f0" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>get_engine</name></member>
      <member refid="classzab_1_1network__operation_1a84bd0e7d0b09be028dbd9b4b619194dc" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>kNoDescriptor</name></member>
      <member refid="classzab_1_1network__operation_1a0742b6758cb38291ab82729fe3e9f5b8" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>last_error</name></member>
      <member refid="classzab_1_1tcp__acceptor_1a71422211cbb518344ebeacd8bc4bf00f" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>listen</name></member>
      <member refid="classzab_1_1network__operation_1ae344f077cd8b6b33e1e5729a4b83a17b" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>net_op</name></member>
      <member refid="classzab_1_1network__operation_1af0828bdea3488c7afde6a862271979ed" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>network_operation</name></member>
      <member refid="classzab_1_1network__operation_1adf97d447011974120c46eca53b14e4b0" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>network_operation</name></member>
      <member refid="classzab_1_1network__operation_1a6f4b29dab497502a5991c233628adea9" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>network_operation</name></member>
      <member refid="classzab_1_1network__operation_1a3dbae42d8a7e7636b3ed890029b4043f" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>network_operation</name></member>
      <member refid="classzab_1_1network__operation_1a2c7137b4fb0ca5528218e710a775e65a" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>network_operation</name></member>
      <member refid="classzab_1_1tcp__acceptor_1a77bfb429be9ef2590f6c2b6b9ddbe512" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>operator=</name></member>
      <member refid="classzab_1_1network__operation_1a6934ddde97513422db08d933b425820f" prot="public" virt="non-virtual" ambiguityscope="zab::network_operation::"><scope>zab::tcp_acceptor</scope><name>operator=</name></member>
      <member refid="classzab_1_1network__operation_1ac82422b1fe5969ba60f27497e1737b59" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>peek_error</name></member>
      <member refid="classzab_1_1network__operation_1ae0fe1fe161f39fe80fc031282b161747" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>register_engine</name></member>
      <member refid="classzab_1_1network__operation_1acbda0a4caae007cf9e2391a4c46894d1" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>set_cancel</name></member>
      <member refid="classzab_1_1network__operation_1a59c122cabc542859d4f970666877b30e" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>set_descriptor</name></member>
      <member refid="classzab_1_1network__operation_1a877aa954f1f7683a57802bad76407497" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>set_error</name></member>
      <member refid="classzab_1_1tcp__acceptor_1a29193b248e50b7468877453bd96c4547" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>swap</name></member>
      <member refid="classzab_1_1tcp__acceptor_1a4e5777877a9420fc6135f1d05a927618" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>tcp_acceptor</name></member>
      <member refid="classzab_1_1tcp__acceptor_1a71c7b568fb16d3b80f53d8b598bc79de" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>tcp_acceptor</name></member>
      <member refid="classzab_1_1tcp__acceptor_1abeda9c49255de19c049e6ce9185e2bb4" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>tcp_acceptor</name></member>
      <member refid="classzab_1_1tcp__acceptor_1a660858ada2a1ad05c4eff6fab0066985" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>tcp_acceptor</name></member>
      <member refid="classzab_1_1network__operation_1ac791de60c6b83c92ae58ca1138ad22d5" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>~network_operation</name></member>
      <member refid="classzab_1_1tcp__acceptor_1a4068033d276c7ab690010a8f6f69282c" prot="public" virt="non-virtual"><scope>zab::tcp_acceptor</scope><name>~tcp_acceptor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
