<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1async__file" kind="class" language="C++" prot="public">
    <compoundname>zab::async_file</compoundname>
    <includes refid="async__file_8hpp" local="no">async_file.hpp</includes>
    <templateparamlist>
      <param>
        <type>MemoryType</type>
        <declname>ReadType</declname>
        <defname>ReadType</defname>
        <defval>std::byte</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classzab_1_1async__file_1a764c726461fb63caaf8d269a0e78d15f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr mode_t</type>
        <definition>constexpr mode_t zab::async_file&lt; ReadType &gt;::kDefaultMode</definition>
        <argsstring></argsstring>
        <name>kDefaultMode</name>
        <initializer>= S_IRUSR | S_IWUSR</initializer>
        <briefdescription>
<para>The default mode for opening files is user read/write. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="223" column="37" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1async__file_1a204e4304ed327800b00170f8ab6137f2" prot="private" static="no" mutable="no">
        <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
        <definition>engine* zab::async_file&lt; ReadType &gt;::engine_</definition>
        <argsstring></argsstring>
        <name>engine_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="662" column="20" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1async__file_1a000eedba69e6dd1cf20d8446419d2b10" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int zab::async_file&lt; ReadType &gt;::file_</definition>
        <argsstring></argsstring>
        <name>file_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="663" column="21" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="663" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classzab_1_1async__file_1a8772e59fa42709a6eb111b0419f62a9c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>static auto zab::async_file&lt; ReadType &gt;::relative_dir</definition>
        <argsstring>()</argsstring>
        <name>relative_dir</name>
        <briefdescription>
<para>Dummy directory to specify the path is relative. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>directory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="158" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a6b9d1a1b211e7a80b0c1bbc678245ead" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>static auto zab::async_file&lt; ReadType &gt;::open</definition>
        <argsstring>(engine *_engine, const directory &amp;_dir, std::string_view _path, int _flags, mode_t _mode=kDefaultMode)</argsstring>
        <name>open</name>
        <param>
          <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
          <declname>_engine</declname>
        </param>
        <param>
          <type>const directory &amp;</type>
          <declname>_dir</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>_mode</declname>
          <defval><ref refid="classzab_1_1async__file_1a764c726461fb63caaf8d269a0e78d15f" kindref="member">kDefaultMode</ref></defval>
        </param>
        <briefdescription>
<para>Opens a file relative to the directory given. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_engine</parametername>
</parameternamelist>
<parameterdescription>
<para>The engine to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative path of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The open mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>suspension_point The awaitable instance for opening the file. Async returns the success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="340" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="340" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a975350d194219e2bc0ada0e29fb68281" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>static auto zab::async_file&lt; ReadType &gt;::close</definition>
        <argsstring>(engine *_engine, int _fd) noexcept</argsstring>
        <name>close</name>
        <param>
          <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
          <declname>_engine</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <briefdescription>
<para>Attempts to close the file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_engine</parametername>
</parameternamelist>
<parameterdescription>
<para>The engine to operate within. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to close. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>suspension_point The awaitable instance for closing the file. Async returns the success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="398" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="398" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a8a683a3a09eeea80671d646d5d9f5aab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1async__function" kindref="compound">async_function</ref></type>
        <definition>static async_function zab::async_file&lt; ReadType &gt;::close_in_background</definition>
        <argsstring>(engine *_engine, int _fd)</argsstring>
        <name>close_in_background</name>
        <param>
          <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
          <declname>_engine</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_fd</declname>
        </param>
        <briefdescription>
<para>Attempts to close the file in the background. </para>
        </briefdescription>
        <detaileddescription>
<para>Cannot report failures to the user.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_engine</parametername>
</parameternamelist>
<parameterdescription>
<para>The engine to operate within. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to close. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>async_function&lt;&gt; The async function that is running. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="428" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="428" bodyend="438"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1async__file_1aa0d7cfdb6ae6d8741add9da76ada55ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::async_file&lt; ReadType &gt;::async_file</definition>
        <argsstring>(engine *_engine)</argsstring>
        <name>async_file</name>
        <param>
          <type><ref refid="classzab_1_1engine" kindref="compound">engine</ref> *</type>
          <declname>_engine</declname>
        </param>
        <briefdescription>
<para>Create a async file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_engine</parametername>
</parameternamelist>
<parameterdescription>
<para>The engine to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="168" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a3741b0f9b1a6dcb492de4fab8a79cbaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::async_file&lt; ReadType &gt;::async_file</definition>
        <argsstring>(const async_file &amp;)=delete</argsstring>
        <name>async_file</name>
        <param>
          <type>const <ref refid="classzab_1_1async__file" kindref="compound">async_file</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Files are not copyable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="174" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1aac0701ef7bc075d2795bca19b5a0a083" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::async_file&lt; ReadType &gt;::async_file</definition>
        <argsstring>(async_file &amp;&amp;_move)</argsstring>
        <name>async_file</name>
        <param>
          <type><ref refid="classzab_1_1async__file" kindref="compound">async_file</ref> &amp;&amp;</type>
          <declname>_move</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classzab_1_1async__file" kindref="compound">async_file</ref> object taking the file descriptor from another <ref refid="classzab_1_1async__file" kindref="compound">async_file</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_move</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1async__file" kindref="compound">async_file</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="182" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a1b30097e6f9a0e48ae10bada29a559d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1async__file" kindref="compound">async_file</ref> &amp;</type>
        <definition>async_file&amp; zab::async_file&lt; ReadType &gt;::operator=</definition>
        <argsstring>(async_file &amp;&amp;_move_op)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classzab_1_1async__file" kindref="compound">async_file</ref> &amp;&amp;</type>
          <declname>_move_op</declname>
        </param>
        <briefdescription>
<para>Move assignment for an <ref refid="classzab_1_1async__file" kindref="compound">async_file</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_move_op</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classzab_1_1async__file" kindref="compound">async_file</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="194" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="194" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a0e32396638075e58027e6b92e18447ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::async_file&lt; ReadType &gt;::~async_file</definition>
        <argsstring>()</argsstring>
        <name>~async_file</name>
        <briefdescription>
<para>Closes the file. </para>
        </briefdescription>
        <detaileddescription>
<para>The actual closing of the file will be flushed to a background process. <computeroutput>co_await</computeroutput>ing on <computeroutput><ref refid="classzab_1_1async__file_1a5d34567e4a5516b1cc3f27ba06d764c4" kindref="member">close()</ref></computeroutput> is reconmended before deconstruction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="209" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="209" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1afb3e65cab846034255150f982b811f22" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::async_file&lt; ReadType &gt;::open</definition>
        <argsstring>(std::string_view _path, file::Option _options, mode_t _mode=kDefaultMode) noexcept</argsstring>
        <name>open</name>
        <param>
          <type>std::string_view</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>file::Option</type>
          <declname>_options</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>_mode</declname>
          <defval><ref refid="classzab_1_1async__file_1a764c726461fb63caaf8d269a0e78d15f" kindref="member">kDefaultMode</ref></defval>
        </param>
        <briefdescription>
<para>Opens a file relative to this proccess cwd. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative path of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>The zab options to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The open mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>suspension_point The awaitable instance for opening the file. Async returns the success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="235" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="235" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a6e6cd8d6bc57a1114cf370a775daa908" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::async_file&lt; ReadType &gt;::open</definition>
        <argsstring>(std::string_view _path, int _flags, mode_t _mode) noexcept</argsstring>
        <name>open</name>
        <param>
          <type>std::string_view</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>_mode</declname>
        </param>
        <briefdescription>
<para>Opens a file relative to this proccess cwd. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative path of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The open mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>suspension_point The awaitable instance for opening the file. Async returns the success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="253" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1aa78ef6f16da3e60dfc06fb2b692ed8b6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::async_file&lt; ReadType &gt;::open</definition>
        <argsstring>(const directory &amp;_dir, std::string_view _path, file::Option _options, mode_t _mode=kDefaultMode) noexcept</argsstring>
        <name>open</name>
        <param>
          <type>const directory &amp;</type>
          <declname>_dir</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>file::Option</type>
          <declname>_options</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>_mode</declname>
          <defval><ref refid="classzab_1_1async__file_1a764c726461fb63caaf8d269a0e78d15f" kindref="member">kDefaultMode</ref></defval>
        </param>
        <briefdescription>
<para>Opens a file relative to the directory given. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative path of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_options</parametername>
</parameternamelist>
<parameterdescription>
<para>The zab options to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The open mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>suspension_point The awaitable instance for opening the file. Async returns the success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="269" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="269" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a0b0dacb2408d2dbd6b7800e2780ad08a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::async_file&lt; ReadType &gt;::open</definition>
        <argsstring>(const directory &amp;_dir, std::string_view _path, int _flags, mode_t _mode=kDefaultMode) noexcept</argsstring>
        <name>open</name>
        <param>
          <type>const directory &amp;</type>
          <declname>_dir</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_flags</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>_mode</declname>
          <defval><ref refid="classzab_1_1async__file_1a764c726461fb63caaf8d269a0e78d15f" kindref="member">kDefaultMode</ref></defval>
        </param>
        <briefdescription>
<para>Opens a file relative to the directory given. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative path of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The open mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>suspension_point The awaitable instance for opening the file. Async returns the success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="289" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="289" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a5d34567e4a5516b1cc3f27ba06d764c4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::async_file&lt; ReadType &gt;::close</definition>
        <argsstring>() noexcept</argsstring>
        <name>close</name>
        <briefdescription>
<para>Attempts to close the file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>suspension_point The awaitable instance for closing the file. Async returns the success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="382" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="382" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a4be74df7c9ab0b0539a4bc5ded8def6e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt; std::vector&lt; ReadType &gt; &gt;</type>
        <definition>simple_future&lt;std::vector&lt;ReadType&gt; &gt; zab::async_file&lt; ReadType &gt;::read_file</definition>
        <argsstring>() noexcept</argsstring>
        <name>read_file</name>
        <briefdescription>
<para>Reads the entire files contents into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref>&lt;std::vector&lt;ReadType&gt;&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="446" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="446" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1ae686b37f52019e7c20c1dbe31380a0fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::async_file&lt; ReadType &gt;::read_some</definition>
        <argsstring>(std::int32_t _amount) noexcept</argsstring>
        <name>read_some</name>
        <param>
          <type>std::int32_t</type>
          <declname>_amount</declname>
        </param>
        <briefdescription>
<para>Reads up to _amount bytes of data from the file. </para>
        </briefdescription>
        <detaileddescription>
<para>May read less then _amount bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>suspension_point The awaitable instance for reading some data. Async returns the amount of bytes read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="479" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="479" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1af55732789f05d9fb46d5d591cb45a2b9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::async_file&lt; ReadType &gt;::read_some</definition>
        <argsstring>(std::span&lt; ReadType &gt; _data, std::int32_t _off_set=0) noexcept</argsstring>
        <name>read_some</name>
        <param>
          <type>std::span&lt; ReadType &gt;</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>std::int32_t</type>
          <declname>_off_set</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Reads up to <computeroutput>_data - _off_set</computeroutput> bytes of data from the file. </para>
        </briefdescription>
        <detaileddescription>
<para>May read less then <computeroutput>_data - _off_set</computeroutput> bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read data into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_off_set</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset for where to read data into the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>suspension_point The awaitable instance for reading some data. Async returns the amount of bytes read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="517" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="517" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a5537661416addf80a17201709010748f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1simple__future" kindref="compound">guaranteed_future</ref>&lt; std::size_t &gt;</type>
        <definition>guaranteed_future&lt;std::size_t&gt; zab::async_file&lt; ReadType &gt;::write_to_file</definition>
        <argsstring>(std::span&lt; const ReadType &gt; _data) noexcept</argsstring>
        <name>write_to_file</name>
        <param>
          <type>std::span&lt; const ReadType &gt;</type>
          <declname>_data</declname>
        </param>
        <briefdescription>
<para>Write the content of _data to the file. </para>
        </briefdescription>
        <detaileddescription>
<para>Only writes less then _data.size bytes if the write operation fails.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guaranteed_future&lt;std::size_t&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="553" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="553" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a91c3fbd3dce4cdf63b55619c44b74bf5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::async_file&lt; ReadType &gt;::write_some</definition>
        <argsstring>(std::span&lt; const ReadType &gt; _data, std::int32_t _off_set=0) noexcept</argsstring>
        <name>write_some</name>
        <param>
          <type>std::span&lt; const ReadType &gt;</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>std::int32_t</type>
          <declname>_off_set</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Writes up to <computeroutput>_data.size() - _off_set</computeroutput> bytes of data to the file. </para>
        </briefdescription>
        <detaileddescription>
<para>May write less then <computeroutput>_data - _off_set</computeroutput> bytes without an error occuring.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write data from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_off_set</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset for where to write data from the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>suspension_point The awaitable instance for writing some data. Async returns the amount of bytes written. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="582" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="582" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a5a5ebc7850e24903658debc2c10b4a36" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zab::async_file&lt; ReadType &gt;::position</definition>
        <argsstring>(std::size_t _pos, file::Offset _whence=file::Offset::kBegin) noexcept</argsstring>
        <name>position</name>
        <param>
          <type>std::size_t</type>
          <declname>_pos</declname>
        </param>
        <param>
          <type>file::Offset</type>
          <declname>_whence</declname>
          <defval>file::Offset::kBegin</defval>
        </param>
        <briefdescription>
<para>Reset the poistion of the file cursor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount to move. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_whence</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to move from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="618" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="618" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a5d12ed22dbefbab2320e5b83805ae23c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t zab::async_file&lt; ReadType &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Computes the size of the file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::size_t The size of the file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="629" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="629" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1a137343468ad1a014572c4042c88bde00" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zab::async_file&lt; ReadType &gt;::good</definition>
        <argsstring>() const noexcept</argsstring>
        <name>good</name>
        <briefdescription>
<para>Checks if there is an error pending on the file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if no error, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="643" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="643" bodyend="646"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classzab_1_1async__file_1a160c734aa99ba3a4c50d0466323502b9" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::span&lt; std::byte &gt;</type>
        <definition>static constexpr std::span&lt;std::byte&gt; zab::async_file&lt; ReadType &gt;::convert</definition>
        <argsstring>(std::span&lt; ReadType &gt; _data, std::size_t _total)</argsstring>
        <name>convert</name>
        <param>
          <type>std::span&lt; ReadType &gt;</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>_total</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="651" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="651" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1async__file_1ab6529a1e500736279013aa608d313d70" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::span&lt; const std::byte &gt;</type>
        <definition>static constexpr std::span&lt;const std::byte&gt; zab::async_file&lt; ReadType &gt;::convert</definition>
        <argsstring>(std::span&lt; const ReadType &gt; _data, std::size_t _total)</argsstring>
        <name>convert</name>
        <param>
          <type>std::span&lt; const ReadType &gt;</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>_total</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="657" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="657" bodyend="660"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class allows for asynchronous file i/o. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classzab_1_1async__file" kindref="compound">async_file</ref> does not provide any synchronisation for file ops. <ref refid="classzab_1_1async__file" kindref="compound">async_file</ref> must be used within an engine thread.</para>
<para>The file descriptor associated with <ref refid="classzab_1_1async__file" kindref="compound">async_file</ref> is opened as if by call to fopen() or open(2) with the following flags:</para>
<para>┌───────────────┬───────────────┬───────────────────────────────┐ │ Options │ fopen() mode │ <ref refid="classzab_1_1async__file_1afb3e65cab846034255150f982b811f22" kindref="member">open()</ref> flags │ ├───────────────┼───────────────┼───────────────────────────────┤ │ kRead │ r │ O_RDONLY │ ├───────────────┼───────────────┼───────────────────────────────┤ │ kTrunc │ w │ O_WRONLY | O_CREAT | O_TRUNC │ ├───────────────┼───────────────┼───────────────────────────────┤ │ kAppend │ a │ O_WRONLY | O_CREAT | O_APPEND │ ├───────────────┼───────────────┼───────────────────────────────┤ │ kReadWrite │ r+ │ O_RDWR │ ├───────────────┼───────────────┼───────────────────────────────┤ │ kRWTruncate │ w+ │ O_RDWR | O_CREAT | O_TRUNC │ ├───────────────├───────────────┼───────────────────────────────┤ │ kRWAppend │ a+ │ O_RDWR | O_CREAT | O_APPEND │ └───────────────┴───────────────┴───────────────────────────────┘ </para>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/async_file.hpp" line="148" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/async_file.hpp" bodystart="148" bodyend="664"/>
    <listofallmembers>
      <member refid="classzab_1_1async__file_1aa0d7cfdb6ae6d8741add9da76ada55ed" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>async_file</name></member>
      <member refid="classzab_1_1async__file_1a3741b0f9b1a6dcb492de4fab8a79cbaf" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>async_file</name></member>
      <member refid="classzab_1_1async__file_1aac0701ef7bc075d2795bca19b5a0a083" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>async_file</name></member>
      <member refid="classzab_1_1async__file_1a5d34567e4a5516b1cc3f27ba06d764c4" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>close</name></member>
      <member refid="classzab_1_1async__file_1a975350d194219e2bc0ada0e29fb68281" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>close</name></member>
      <member refid="classzab_1_1async__file_1a8a683a3a09eeea80671d646d5d9f5aab" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>close_in_background</name></member>
      <member refid="classzab_1_1async__file_1a160c734aa99ba3a4c50d0466323502b9" prot="private" virt="non-virtual"><scope>zab::async_file</scope><name>convert</name></member>
      <member refid="classzab_1_1async__file_1ab6529a1e500736279013aa608d313d70" prot="private" virt="non-virtual"><scope>zab::async_file</scope><name>convert</name></member>
      <member refid="classzab_1_1async__file_1a204e4304ed327800b00170f8ab6137f2" prot="private" virt="non-virtual"><scope>zab::async_file</scope><name>engine_</name></member>
      <member refid="classzab_1_1async__file_1a000eedba69e6dd1cf20d8446419d2b10" prot="private" virt="non-virtual"><scope>zab::async_file</scope><name>file_</name></member>
      <member refid="classzab_1_1async__file_1a137343468ad1a014572c4042c88bde00" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>good</name></member>
      <member refid="classzab_1_1async__file_1a764c726461fb63caaf8d269a0e78d15f" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>kDefaultMode</name></member>
      <member refid="classzab_1_1async__file_1afb3e65cab846034255150f982b811f22" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>open</name></member>
      <member refid="classzab_1_1async__file_1a6e6cd8d6bc57a1114cf370a775daa908" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>open</name></member>
      <member refid="classzab_1_1async__file_1aa78ef6f16da3e60dfc06fb2b692ed8b6" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>open</name></member>
      <member refid="classzab_1_1async__file_1a0b0dacb2408d2dbd6b7800e2780ad08a" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>open</name></member>
      <member refid="classzab_1_1async__file_1a6b9d1a1b211e7a80b0c1bbc678245ead" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>open</name></member>
      <member refid="classzab_1_1async__file_1a1b30097e6f9a0e48ae10bada29a559d4" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>operator=</name></member>
      <member refid="classzab_1_1async__file_1a5a5ebc7850e24903658debc2c10b4a36" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>position</name></member>
      <member refid="classzab_1_1async__file_1a4be74df7c9ab0b0539a4bc5ded8def6e" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>read_file</name></member>
      <member refid="classzab_1_1async__file_1ae686b37f52019e7c20c1dbe31380a0fa" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>read_some</name></member>
      <member refid="classzab_1_1async__file_1af55732789f05d9fb46d5d591cb45a2b9" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>read_some</name></member>
      <member refid="classzab_1_1async__file_1a8772e59fa42709a6eb111b0419f62a9c" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>relative_dir</name></member>
      <member refid="classzab_1_1async__file_1a5d12ed22dbefbab2320e5b83805ae23c" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>size</name></member>
      <member refid="classzab_1_1async__file_1a91c3fbd3dce4cdf63b55619c44b74bf5" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>write_some</name></member>
      <member refid="classzab_1_1async__file_1a5537661416addf80a17201709010748f" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>write_to_file</name></member>
      <member refid="classzab_1_1async__file_1a0e32396638075e58027e6b92e18447ad" prot="public" virt="non-virtual"><scope>zab::async_file</scope><name>~async_file</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
