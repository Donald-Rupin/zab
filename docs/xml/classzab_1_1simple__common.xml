<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1simple__common" kind="class" language="C++" prot="public">
    <compoundname>zab::simple_common</compoundname>
    <derivedcompoundref refid="classzab_1_1simple__promise" prot="public" virt="non-virtual">zab::simple_promise&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classzab_1_1simple__promise_3_01bool_01_4" prot="public" virt="non-virtual">zab::simple_promise&lt; bool &gt;</derivedcompoundref>
    <derivedcompoundref refid="classzab_1_1simple__promise_3_01promise__always__resolves_3_01T_01_4_01_4" prot="public" virt="non-virtual">zab::simple_promise&lt; promise_always_resolves&lt; T &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classzab_1_1simple__promise_3_01void_01_4" prot="public" virt="non-virtual">zab::simple_promise&lt; void &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1simple__common_1a67c908d39922ee1fc2da2f5e975e0b91" prot="private" static="no" mutable="no">
        <type>tagged_event</type>
        <definition>tagged_event zab::simple_common&lt; T &gt;::underlying_</definition>
        <argsstring></argsstring>
        <name>underlying_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="169" column="26" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1simple__common_1a370fb58fc404be937c6340c7dff946aa" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool zab::simple_common&lt; T &gt;::complete_</definition>
        <argsstring></argsstring>
        <name>complete_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="170" column="26" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1simple__common_1a8c4fff11d8a379f9c57e633532a5a07d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::simple_common&lt; T &gt;::simple_common</definition>
        <argsstring>()</argsstring>
        <name>simple_common</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="89" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__common_1aa0bd8b34ed3ff4603e2ffcc2cf2fadd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::simple_common&lt; T &gt;::~simple_common</definition>
        <argsstring>()</argsstring>
        <name>~simple_common</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="91" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="91" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__common_1a2fb0f6479190f926a05d1e502dd45a1f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::simple_common&lt; T &gt;::get_return_object</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_return_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="105" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__common_1a6247406ec14650f00f489c5dcc0a6d86" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::simple_common&lt; T &gt;::set_underlying</definition>
        <argsstring>(tagged_event _under) noexcept</argsstring>
        <name>set_underlying</name>
        <param>
          <type>tagged_event</type>
          <declname>_under</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="111" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__common_1a44fcb10ef7068de4f2f7e59b9687ae6d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>tagged_event</type>
        <definition>tagged_event zab::simple_common&lt; T &gt;::underlying</definition>
        <argsstring>() noexcept</argsstring>
        <name>underlying</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="117" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__common_1ab772a146a1fadaf56c30f41c68ec9284" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::simple_common&lt; T &gt;::complete</definition>
        <argsstring>() noexcept</argsstring>
        <name>complete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="123" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__common_1a71be4e797d23e4099c5036c5876f9845" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zab::simple_common&lt; T &gt;::is_complete</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_complete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="129" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__common_1acfb27f21499a377ee9d144fa8385a7d6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::simple_common&lt; T &gt;::initial_suspend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>initial_suspend</name>
        <briefdescription>
<para>Always suspend execution of the promise. wait for it to be co_awaited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput>std::suspend_always</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="141" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__common_1a4a0978f9233dda5c907155f793db6afe" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::simple_common&lt; T &gt;::final_suspend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>final_suspend</name>
        <briefdescription>
<para>Final suspension of Promise resumes the underlying coroutine that co_awaited the <computeroutput>simple_common</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A structure for resuming the underlying coroutine. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="153" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1simple__common_1a65343cd0bce64c263727d5cffe9b5190" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::simple_common&lt; T &gt;::unhandled_exception</definition>
        <argsstring>()</argsstring>
        <name>unhandled_exception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="159" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="159" bodyend="164"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>zab::simple_promise&lt; bool &gt;</label>
        <link refid="classzab_1_1simple__promise_3_01bool_01_4"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>zab::simple_promise&lt; void &gt;</label>
        <link refid="classzab_1_1simple__promise_3_01void_01_4"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>zab::simple_promise&lt; T &gt;</label>
        <link refid="classzab_1_1simple__promise"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>zab::simple_common&lt; T &gt;</label>
      </node>
    </inheritancegraph>
    <location file="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" line="85" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/simple_promise.hpp" bodystart="85" bodyend="171"/>
    <listofallmembers>
      <member refid="classzab_1_1simple__common_1ab772a146a1fadaf56c30f41c68ec9284" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>complete</name></member>
      <member refid="classzab_1_1simple__common_1a370fb58fc404be937c6340c7dff946aa" prot="private" virt="non-virtual"><scope>zab::simple_common</scope><name>complete_</name></member>
      <member refid="classzab_1_1simple__common_1a4a0978f9233dda5c907155f793db6afe" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>final_suspend</name></member>
      <member refid="classzab_1_1simple__common_1a2fb0f6479190f926a05d1e502dd45a1f" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>get_return_object</name></member>
      <member refid="classzab_1_1simple__common_1acfb27f21499a377ee9d144fa8385a7d6" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>initial_suspend</name></member>
      <member refid="classzab_1_1simple__common_1a71be4e797d23e4099c5036c5876f9845" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>is_complete</name></member>
      <member refid="classzab_1_1simple__common_1a6247406ec14650f00f489c5dcc0a6d86" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>set_underlying</name></member>
      <member refid="classzab_1_1simple__common_1a8c4fff11d8a379f9c57e633532a5a07d" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>simple_common</name></member>
      <member refid="classzab_1_1simple__common_1a44fcb10ef7068de4f2f7e59b9687ae6d" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>underlying</name></member>
      <member refid="classzab_1_1simple__common_1a67c908d39922ee1fc2da2f5e975e0b91" prot="private" virt="non-virtual"><scope>zab::simple_common</scope><name>underlying_</name></member>
      <member refid="classzab_1_1simple__common_1a65343cd0bce64c263727d5cffe9b5190" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>unhandled_exception</name></member>
      <member refid="classzab_1_1simple__common_1aa0bd8b34ed3ff4603e2ffcc2cf2fadd4" prot="public" virt="non-virtual"><scope>zab::simple_common</scope><name>~simple_common</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
