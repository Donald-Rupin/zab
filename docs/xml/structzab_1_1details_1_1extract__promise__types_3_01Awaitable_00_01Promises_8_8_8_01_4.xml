<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structzab_1_1details_1_1extract__promise__types_3_01Awaitable_00_01Promises_8_8_8_01_4" kind="struct" language="C++" prot="public">
    <compoundname>zab::details::extract_promise_types&lt; Awaitable, Promises... &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>AwaitableProxy</type>
        <declname>Awaitable</declname>
        <defname>Awaitable</defname>
      </param>
      <param>
        <type>typename...</type>
        <declname>Promises</declname>
        <defname>Promises</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structzab_1_1details_1_1extract__promise__types_3_01Awaitable_00_01Promises_8_8_8_01_4_1a3976cd98f16e3b8a76050609011dd006" prot="public" static="no">
        <type>std::decay_t&lt; decltype(std::declval&lt; Awaitable &gt;().operator co_await().await_resume())&gt;</type>
        <definition>using zab::details::extract_promise_types&lt; Awaitable, Promises... &gt;::type =  std::decay_t&lt; decltype(std::declval&lt;Awaitable&gt;().operator co_await().await_resume())&gt;</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="96" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structzab_1_1details_1_1extract__promise__types_3_01Awaitable_00_01Promises_8_8_8_01_4_1a46ffd1e426951544a32d397b73432493" prot="public" static="no">
        <type><ref refid="namespacezab_1_1details_1a6bdb0ede6bbee3549454e674c34247e2" kindref="member">tuple_cat_t</ref>&lt; std::tuple&lt; type &gt;, typename <ref refid="structzab_1_1details_1_1extract__promise__types" kindref="compound">extract_promise_types</ref>&lt; Promises... &gt;::types &gt;</type>
        <definition>using zab::details::extract_promise_types&lt; Awaitable, Promises... &gt;::types =  tuple_cat_t&lt; std::tuple&lt;type&gt;, typename extract_promise_types&lt;Promises...&gt;::types&gt;</definition>
        <argsstring></argsstring>
        <name>types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The concanated types of the font <ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> and the remaining Futures. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="103" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structzab_1_1details_1_1extract__promise__types_3_01Awaitable_00_01Promises_8_8_8_01_4_1a4b883e08188c947079e04e2c5f2b5433" prot="public" static="no">
        <type><ref refid="namespacezab_1_1details_1a6bdb0ede6bbee3549454e674c34247e2" kindref="member">tuple_cat_t</ref>&lt; std::tuple&lt; <ref refid="structzab_1_1promise__void" kindref="compound">promise_void</ref> &gt;, typename <ref refid="structzab_1_1details_1_1extract__promise__types" kindref="compound">extract_promise_types</ref>&lt; Promises... &gt;::types &gt;</type>
        <definition>using zab::details::extract_promise_types&lt; Awaitable, Promises... &gt;::types =  tuple_cat_t&lt; std::tuple&lt;promise_void&gt;, typename extract_promise_types&lt;Promises...&gt;::types&gt;</definition>
        <argsstring></argsstring>
        <name>types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The concanated types of the font <ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> and the remaining Futures. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="115" column="17" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/wait_for.hpp" line="94" column="9" bodyfile="/home/donald/rupin/zab/includes/zab/wait_for.hpp" bodystart="94" bodyend="106"/>
    <listofallmembers>
      <member refid="structzab_1_1details_1_1extract__promise__types_3_01Awaitable_00_01Promises_8_8_8_01_4_1a3976cd98f16e3b8a76050609011dd006" prot="public" virt="non-virtual"><scope>zab::details::extract_promise_types&lt; Awaitable, Promises... &gt;</scope><name>type</name></member>
      <member refid="structzab_1_1details_1_1extract__promise__types_3_01Awaitable_00_01Promises_8_8_8_01_4_1a46ffd1e426951544a32d397b73432493" prot="public" virt="non-virtual"><scope>zab::details::extract_promise_types&lt; Awaitable, Promises... &gt;</scope><name>types</name></member>
      <member refid="structzab_1_1details_1_1extract__promise__types_3_01Awaitable_00_01Promises_8_8_8_01_4_1a4b883e08188c947079e04e2c5f2b5433" prot="public" virt="non-virtual"><scope>zab::details::extract_promise_types&lt; Awaitable, Promises... &gt;</scope><name>types</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
