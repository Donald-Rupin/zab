<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1observable_1_1observer" kind="class" language="C++" prot="public">
    <compoundname>zab::observable::observer</compoundname>
    <innerclass refid="classzab_1_1observable_1_1observer_1_1observer__guard" prot="public">zab::observable::observer::observer_guard</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classzab_1_1observable_1_1observer_1a98d63db70a51b1d741ad837a0e47a458" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class observable</definition>
        <argsstring></argsstring>
        <name>observable</name>
        <param>
          <type>observable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="93" column="21" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1observable_1_1observer_1a54246926bcb50b13a1a32a38bbcbead6" prot="private" static="no" mutable="no">
        <type>observable *</type>
        <definition>observable* zab::observable&lt; Args &gt;::observer::observable_</definition>
        <argsstring></argsstring>
        <name>observable_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="194" column="39" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzab_1_1observable_1_1observer_1a656da04136b66f8eeb2ec7e6eb01ec6d" prot="private" static="no" mutable="no">
        <type>internal_observer *</type>
        <definition>internal_observer* zab::observable&lt; Args &gt;::observer::internal_</definition>
        <argsstring></argsstring>
        <name>internal_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="195" column="39" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1observable_1_1observer_1a8b9d4165572af7bd7ee20073e841cf34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::observable&lt; Args &gt;::observer::observer</definition>
        <argsstring>(observable *_ob, internal_observer *_internal)</argsstring>
        <name>observer</name>
        <param>
          <type>observable *</type>
          <declname>_ob</declname>
        </param>
        <param>
          <type>internal_observer *</type>
          <declname>_internal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="97" column="21" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1observable_1_1observer_1a0f3656a276566fce06318017ccaad8f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::observable&lt; Args &gt;::observer::observer</definition>
        <argsstring>(const observer &amp;)=delete</argsstring>
        <name>observer</name>
        <param>
          <type>const observer &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="101" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1observable_1_1observer_1a8dd679a499fe80af2bfd756ddfa11ac3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::observable&lt; Args &gt;::observer::observer</definition>
        <argsstring>(observer &amp;&amp;_move)</argsstring>
        <name>observer</name>
        <param>
          <type>observer &amp;&amp;</type>
          <declname>_move</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="103" column="21" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1observable_1_1observer_1ab86afd863a8176a1401debefa5f56feb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>observer &amp;</type>
        <definition>observer&amp; zab::observable&lt; Args &gt;::observer::operator=</definition>
        <argsstring>(observer &amp;&amp;_move_assign) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>observer &amp;&amp;</type>
          <declname>_move_assign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="111" column="21" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1observable_1_1observer_1a23f1df470fbd030ef29b4ab2c316010a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::observable&lt; Args &gt;::observer::~observer</definition>
        <argsstring>()</argsstring>
        <name>~observer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="128" column="21" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1observable_1_1observer_1a077a19d4e53dab75bed1841d0f7a4baa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::observable&lt; Args &gt;::observer::operator co_await</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="149" column="26" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="149" bodyend="190"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classzab_1_1observable_1_1observer_1a6c55c252169d836c5b54f34c0d475437" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1async__function" kindref="compound">zab::async_function</ref></type>
        <definition>static zab::async_function zab::observable&lt; Args &gt;::observer::destroy</definition>
        <argsstring>(observer &amp;_observer)</argsstring>
        <name>destroy</name>
        <param>
          <type>observer &amp;</type>
          <declname>_observer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="120" column="21" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="120" bodyend="126"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/observable.hpp" line="91" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/observable.hpp" bodystart="91" bodyend="196"/>
    <listofallmembers>
      <member refid="classzab_1_1observable_1_1observer_1a6c55c252169d836c5b54f34c0d475437" prot="public" virt="non-virtual"><scope>zab::observable::observer</scope><name>destroy</name></member>
      <member refid="classzab_1_1observable_1_1observer_1a656da04136b66f8eeb2ec7e6eb01ec6d" prot="private" virt="non-virtual"><scope>zab::observable::observer</scope><name>internal_</name></member>
      <member refid="classzab_1_1observable_1_1observer_1a98d63db70a51b1d741ad837a0e47a458" prot="private" virt="non-virtual"><scope>zab::observable::observer</scope><name>observable</name></member>
      <member refid="classzab_1_1observable_1_1observer_1a54246926bcb50b13a1a32a38bbcbead6" prot="private" virt="non-virtual"><scope>zab::observable::observer</scope><name>observable_</name></member>
      <member refid="classzab_1_1observable_1_1observer_1a8b9d4165572af7bd7ee20073e841cf34" prot="public" virt="non-virtual"><scope>zab::observable::observer</scope><name>observer</name></member>
      <member refid="classzab_1_1observable_1_1observer_1a0f3656a276566fce06318017ccaad8f6" prot="public" virt="non-virtual"><scope>zab::observable::observer</scope><name>observer</name></member>
      <member refid="classzab_1_1observable_1_1observer_1a8dd679a499fe80af2bfd756ddfa11ac3" prot="public" virt="non-virtual"><scope>zab::observable::observer</scope><name>observer</name></member>
      <member refid="classzab_1_1observable_1_1observer_1a077a19d4e53dab75bed1841d0f7a4baa" prot="public" virt="non-virtual"><scope>zab::observable::observer</scope><name>operator co_await</name></member>
      <member refid="classzab_1_1observable_1_1observer_1ab86afd863a8176a1401debefa5f56feb" prot="public" virt="non-virtual"><scope>zab::observable::observer</scope><name>operator=</name></member>
      <member refid="classzab_1_1observable_1_1observer_1a23f1df470fbd030ef29b4ab2c316010a" prot="public" virt="non-virtual"><scope>zab::observable::observer</scope><name>~observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
