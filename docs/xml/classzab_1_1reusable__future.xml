<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classzab_1_1reusable__future" kind="class" language="C++" prot="public">
    <compoundname>zab::reusable_future</compoundname>
    <includes refid="reusable__future_8hpp" local="no">reusable_future.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
        <defval>void</defval>
      </param>
      <param>
        <type>details::Reoccurring</type>
        <declname>Promise</declname>
        <defname>Promise</defname>
        <defval>reusable_promise&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classzab_1_1reusable__future_1a0deec04551cd5fa6fe2d28213b81308b" prot="public" static="no">
        <type>Promise</type>
        <definition>using zab::reusable_future&lt; T, Promise &gt;::promise_type =  Promise</definition>
        <argsstring></argsstring>
        <name>promise_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="82" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzab_1_1reusable__future_1af68120f436b01c0b59132841d2158b24" prot="public" static="no">
        <type>std::coroutine_handle&lt; promise_type &gt;</type>
        <definition>using zab::reusable_future&lt; T, Promise &gt;::coro_handle =  std::coroutine_handle&lt;promise_type&gt;</definition>
        <argsstring></argsstring>
        <name>coro_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="85" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzab_1_1reusable__future_1a0b97bacf4f71f3d840c8981e07288e73" prot="public" static="no">
        <type>std::coroutine_handle&lt;&gt;</type>
        <definition>using zab::reusable_future&lt; T, Promise &gt;::erased_coro_handle =  std::coroutine_handle&lt;&gt;</definition>
        <argsstring></argsstring>
        <name>erased_coro_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="88" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classzab_1_1reusable__future_1a68ed7cb02de00f8cd2d03464d659da10" prot="public" static="no">
        <type>typename deduce_type&lt; typename Promise::returns &gt;::type</type>
        <definition>using zab::reusable_future&lt; T, Promise &gt;::return_value =  typename deduce_type&lt;typename Promise::returns&gt;::type</definition>
        <argsstring></argsstring>
        <name>return_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="91" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzab_1_1reusable__future_1a32c0224beacf498ce4bef44ea3e16132" prot="private" static="no" mutable="no">
        <type>coro_handle</type>
        <definition>coro_handle zab::reusable_future&lt; T, Promise &gt;::handle_</definition>
        <argsstring></argsstring>
        <name>handle_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="232" column="25" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzab_1_1reusable__future_1afb34cf4f6bf2cdf5dca07abcfcfe85a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::reusable_future&lt; T, Promise &gt;::reusable_future</definition>
        <argsstring>(coro_handle _coroutine)</argsstring>
        <name>reusable_future</name>
        <param>
          <type>coro_handle</type>
          <declname>_coroutine</declname>
        </param>
        <briefdescription>
<para>Construct with the future with a handle to its coroutine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_coroutine</parametername>
</parameternamelist>
<parameterdescription>
<para>The coroutine handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="98" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1reusable__future_1a009cabd48bcf9a9f4062e80d874961fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::reusable_future&lt; T, Promise &gt;::~reusable_future</definition>
        <argsstring>()</argsstring>
        <name>~reusable_future</name>
        <briefdescription>
<para>Destroys the future and cleans up the coroutine handle. </para>
        </briefdescription>
        <detaileddescription>
<para>We destroy the coroutine handle here as the the final_suspend in the <computeroutput>reusable_promise</computeroutput> does not resume. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="107" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="107" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1reusable__future_1a2e83fc321b58652bb36dee0dcb765664" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> &amp;</type>
        <definition>reusable_future&amp; zab::reusable_future&lt; T, Promise &gt;::operator=</definition>
        <argsstring>(reusable_future &amp;&amp;_other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> &amp;&amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Move Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1simple__future" kindref="compound">simple_future</ref> to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="124" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1reusable__future_1a30879c96311ffbff634ee74d7d9b7229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>zab::reusable_future&lt; T, Promise &gt;::reusable_future</definition>
        <argsstring>(const reusable_future &amp;_other)=delete</argsstring>
        <name>reusable_future</name>
        <param>
          <type>const <ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> &amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Cannot be coppied. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="140" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1reusable__future_1a679d0ef422db1ff023579e1cdc9ed2b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zab::reusable_future&lt; T, Promise &gt;::reusable_future</definition>
        <argsstring>(reusable_future &amp;&amp;_other)</argsstring>
        <name>reusable_future</name>
        <param>
          <type><ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> &amp;&amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Moving makes the moved <ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> lose ownership of the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classzab_1_1reusable__future" kindref="compound">reusable_future</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="147" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1reusable__future_1a169b6e83bd103c472c40f86d59ffdfd3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto zab::reusable_future&lt; T, Promise &gt;::operator co_await</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
<para>wait for the <computeroutput>reusable_promise</computeroutput> to be fulfilled or fail. </para>
        </briefdescription>
        <detaileddescription>
<para>Then co_await returns an <computeroutput>std::optional&lt;T&gt;</computeroutput> which represents if the reusable_promise was fulfilled.</para>
<para><simplesect kind="return"><para>A <computeroutput>co_await</computeroutput>&apos;able struct. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>The handle of coroutine to execute next.</para>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="160" column="18" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="160" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1reusable__future_1a6de3c73be1a594fc556a34b721a50057" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zab::reusable_future&lt; T, Promise &gt;::complete</definition>
        <argsstring>() const noexcept</argsstring>
        <name>complete</name>
        <briefdescription>
<para>Test if the coroutine has fully completed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if complete, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="201" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1reusable__future_1ac06328186fdb88a89f2500650f215ece" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>zab::reusable_future&lt; T, Promise &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Test if the coroutine has fully completed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if complete, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="211" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classzab_1_1reusable__future_1a9a1aa252c25ffd3cdc8d5e1aaaa1acfe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zab::reusable_future&lt; T, Promise &gt;::force_completion</definition>
        <argsstring>() noexcept</argsstring>
        <name>force_completion</name>
        <briefdescription>
<para>Force the end of the coroutine. </para>
        </briefdescription>
        <detaileddescription>
<para>If this function is called while somthing is <computeroutput>co_await</computeroutput>ing the corountine, it will cause undefined behaviour. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="220" column="13" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="220" bodyend="228"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents the future value of a reusuable promise. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the promised value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" line="77" column="5" bodyfile="/home/donald/rupin/zab/includes/zab/reusable_future.hpp" bodystart="77" bodyend="233"/>
    <listofallmembers>
      <member refid="classzab_1_1reusable__future_1a6de3c73be1a594fc556a34b721a50057" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>complete</name></member>
      <member refid="classzab_1_1reusable__future_1af68120f436b01c0b59132841d2158b24" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>coro_handle</name></member>
      <member refid="classzab_1_1reusable__future_1a0b97bacf4f71f3d840c8981e07288e73" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>erased_coro_handle</name></member>
      <member refid="classzab_1_1reusable__future_1a9a1aa252c25ffd3cdc8d5e1aaaa1acfe" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>force_completion</name></member>
      <member refid="classzab_1_1reusable__future_1a32c0224beacf498ce4bef44ea3e16132" prot="private" virt="non-virtual"><scope>zab::reusable_future</scope><name>handle_</name></member>
      <member refid="classzab_1_1reusable__future_1ac06328186fdb88a89f2500650f215ece" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>operator bool</name></member>
      <member refid="classzab_1_1reusable__future_1a169b6e83bd103c472c40f86d59ffdfd3" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>operator co_await</name></member>
      <member refid="classzab_1_1reusable__future_1a2e83fc321b58652bb36dee0dcb765664" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>operator=</name></member>
      <member refid="classzab_1_1reusable__future_1a0deec04551cd5fa6fe2d28213b81308b" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>promise_type</name></member>
      <member refid="classzab_1_1reusable__future_1a68ed7cb02de00f8cd2d03464d659da10" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>return_value</name></member>
      <member refid="classzab_1_1reusable__future_1afb34cf4f6bf2cdf5dca07abcfcfe85a0" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>reusable_future</name></member>
      <member refid="classzab_1_1reusable__future_1a30879c96311ffbff634ee74d7d9b7229" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>reusable_future</name></member>
      <member refid="classzab_1_1reusable__future_1a679d0ef422db1ff023579e1cdc9ed2b5" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>reusable_future</name></member>
      <member refid="classzab_1_1reusable__future_1a009cabd48bcf9a9f4062e80d874961fc" prot="public" virt="non-virtual"><scope>zab::reusable_future</scope><name>~reusable_future</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
